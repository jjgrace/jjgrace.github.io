<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>私有OSS仓库实现图片预览</title>
      <link href="/posts/1355304993.html"/>
      <url>/posts/1355304993.html</url>
      
        <content type="html"><![CDATA[<h2 id="项目背景："><a href="#项目背景：" class="headerlink" title="项目背景："></a>项目背景：</h2><p>接入私有OSS以后，需要实现图片上传&#x2F;访问，但因仓库私有，也不像ali-oss等云服务可以提供生成临时共有访问地址，只能以流的方式从OSS读取数据并渲染到前端。</p><p>引入依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--引入AWS EDS对象存储依赖--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.amazonaws<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aws-java-sdk-s3<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.11.490<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>代码实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hsyk.bright.client.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.dev33.satoken.util.SaResult;</span><br><span class="line"><span class="keyword">import</span> com.hsyk.bright.client.utils.AwsS3Component;</span><br><span class="line"><span class="keyword">import</span> io.swagger.annotations.Api;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.lang3.StringUtils;</span><br><span class="line"><span class="keyword">import</span> org.springframework.util.AntPathMatcher;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.*;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.multipart.MultipartFile;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.HandlerMapping;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"><span class="keyword">import</span> javax.imageio.ImageIO;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.image.BufferedImage;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/aws&quot;)</span></span><br><span class="line"><span class="meta">@Api(tags = &quot;aws文件上传&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AwsOssController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    AwsS3Component awsS3Component;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    HttpServletResponse response;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/file/upload&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> SaResult <span class="title function_">upload</span><span class="params">(MultipartFile file,String folder)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">return</span> SaResult.data(awsS3Component.upload(file,folder));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/get/&#123;address&#125;/**&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">get</span><span class="params">(<span class="meta">@PathVariable(&quot;address&quot;)</span> String address, HttpServletRequest request)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">//处理请求参数中带目录/的参数</span></span><br><span class="line">        <span class="keyword">final</span> <span class="type">String</span> <span class="variable">pathQ</span> <span class="operator">=</span> request.getAttribute(HandlerMapping.PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE).toString();</span><br><span class="line">        <span class="keyword">final</span> <span class="type">String</span> <span class="variable">bestMatchingPattern</span> <span class="operator">=</span> request.getAttribute(HandlerMapping.BEST_MATCHING_PATTERN_ATTRIBUTE).toString();</span><br><span class="line">        <span class="type">String</span> <span class="variable">arguments</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AntPathMatcher</span>().extractPathWithinPattern(bestMatchingPattern, pathQ);</span><br><span class="line">        String moduleName;</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isNotBlank(arguments)) &#123;</span><br><span class="line">            moduleName = address + <span class="string">&#x27;/&#x27;</span> + arguments;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            moduleName = address;</span><br><span class="line">        &#125;</span><br><span class="line">        String[] split = moduleName.split(<span class="string">&quot;\\.&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">extend</span> <span class="operator">=</span> split[<span class="number">1</span>];</span><br><span class="line">        <span class="type">OutputStream</span> <span class="variable">os</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">            inputStream = awsS3Component.getInputStream(moduleName);</span><br><span class="line">            <span class="type">BufferedImage</span> <span class="variable">image</span> <span class="operator">=</span> ImageIO.read(inputStream);</span><br><span class="line">            response.setContentType(<span class="string">&quot;image/&quot;</span> + extend);</span><br><span class="line">            os = response.getOutputStream();</span><br><span class="line">            <span class="keyword">if</span>(image != <span class="literal">null</span>)&#123;</span><br><span class="line">                ImageIO.write(image,extend,os);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(os != <span class="literal">null</span>)&#123;</span><br><span class="line">                os.flush();</span><br><span class="line">                os.close();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="注意-response-setContentType-“image-“-extend-必须设置返回的文件类型，浏览器才可以直接渲染展示"><a href="#注意-response-setContentType-“image-“-extend-必须设置返回的文件类型，浏览器才可以直接渲染展示" class="headerlink" title="注意 response.setContentType(“image&#x2F;“ + extend);  必须设置返回的文件类型，浏览器才可以直接渲染展示"></a>注意 response.setContentType(“image&#x2F;“ + extend);  必须设置返回的文件类型，浏览器才可以直接渲染展示</h4><p>用到了工具类AwsS3Component和FileMd5Util</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hsyk.bright.client.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.amazonaws.ClientConfiguration;</span><br><span class="line"><span class="keyword">import</span> com.amazonaws.Protocol;</span><br><span class="line"><span class="keyword">import</span> com.amazonaws.auth.AWSStaticCredentialsProvider;</span><br><span class="line"><span class="keyword">import</span> com.amazonaws.auth.BasicAWSCredentials;</span><br><span class="line"><span class="keyword">import</span> com.amazonaws.client.builder.AwsClientBuilder;</span><br><span class="line"><span class="keyword">import</span> com.amazonaws.regions.Regions;</span><br><span class="line"><span class="keyword">import</span> com.amazonaws.services.s3.AmazonS3;</span><br><span class="line"><span class="keyword">import</span> com.amazonaws.services.s3.AmazonS3ClientBuilder;</span><br><span class="line"><span class="keyword">import</span> com.amazonaws.services.s3.model.*;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.InitializingBean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.context.config.annotation.RefreshScope;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.multipart.MultipartFile;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"><span class="keyword">import</span> javax.imageio.ImageIO;</span><br><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@RefreshScope</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AwsS3Component</span> <span class="keyword">implements</span> <span class="title class_">InitializingBean</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;aws.accessKey&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String accessKey;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;aws.secretKey&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String accessSecret;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;aws.bucket&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String bucket;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;aws.endpoint&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String endpoint;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> AmazonS3 client;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> FileMd5Util fileMd5Util;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterPropertiesSet</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">ClientConfiguration</span> <span class="variable">config</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClientConfiguration</span>();</span><br><span class="line">        config.setProtocol(Protocol.HTTP);</span><br><span class="line">        config.disableSocketProxy();</span><br><span class="line">        <span class="built_in">this</span>.client = AmazonS3ClientBuilder</span><br><span class="line">                .standard()</span><br><span class="line">                .withClientConfiguration(config)</span><br><span class="line">                .withCredentials(<span class="keyword">new</span> <span class="title class_">AWSStaticCredentialsProvider</span>(<span class="keyword">new</span> <span class="title class_">BasicAWSCredentials</span>(accessKey, accessSecret)))</span><br><span class="line">                .withEndpointConfiguration(<span class="keyword">new</span> <span class="title class_">AwsClientBuilder</span>.EndpointConfiguration(endpoint, Regions.CN_NORTH_1.getName()))</span><br><span class="line">                .enablePathStyleAccess()</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 执行文件上传</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> file 要上传的文件的路径</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key  存储文件的路径</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 文件路径</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">upload</span><span class="params">(File file, String key)</span> &#123;</span><br><span class="line">        client.putObject(<span class="keyword">new</span> <span class="title class_">PutObjectRequest</span>(bucket, key, file).withCannedAcl(CannedAccessControlList.PublicRead));</span><br><span class="line">        <span class="type">GeneratePresignedUrlRequest</span> <span class="variable">urlRequest</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GeneratePresignedUrlRequest</span>(bucket, key);</span><br><span class="line">        <span class="type">URL</span> <span class="variable">url</span> <span class="operator">=</span> client.generatePresignedUrl(urlRequest);</span><br><span class="line">        <span class="keyword">return</span> url.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 文件流执行文件上传</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> input</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">upload</span><span class="params">(MultipartFile file,String folder)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">//获取文件md5值</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">fileMd5</span> <span class="operator">=</span> fileMd5Util.getFileMd5Value(file);</span><br><span class="line">        <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> file.getOriginalFilename();</span><br><span class="line">        <span class="type">String</span> <span class="variable">prefix</span> <span class="operator">=</span> fileName.substring(fileName.lastIndexOf(<span class="string">&quot;.&quot;</span>) + <span class="number">1</span>);</span><br><span class="line">        <span class="type">StringBuffer</span> <span class="variable">tempFileName</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>(fileMd5);</span><br><span class="line">        tempFileName.append(<span class="string">&quot;.&quot;</span>).append(prefix);</span><br><span class="line">        <span class="type">String</span> <span class="variable">localFileName</span> <span class="operator">=</span> tempFileName.toString();</span><br><span class="line">        <span class="type">ObjectMetadata</span> <span class="variable">metadata</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectMetadata</span>();</span><br><span class="line">        metadata.setContentLength(file.getInputStream().available());</span><br><span class="line">        localFileName = folder + <span class="string">&quot;/&quot;</span> + localFileName;</span><br><span class="line">        client.putObject(<span class="keyword">new</span> <span class="title class_">PutObjectRequest</span>(bucket, localFileName, file.getInputStream(), metadata).withCannedAcl(CannedAccessControlList.PublicRead));</span><br><span class="line">        <span class="type">GeneratePresignedUrlRequest</span> <span class="variable">urlRequest</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GeneratePresignedUrlRequest</span>(bucket, localFileName);</span><br><span class="line">        <span class="type">URL</span> <span class="variable">generatePresignedUrl</span> <span class="operator">=</span> client.generatePresignedUrl(urlRequest);</span><br><span class="line">        log.info(<span class="string">&quot;generatePresignedUrl=========================&#123;&#125;&quot;</span>,generatePresignedUrl);</span><br><span class="line">        <span class="comment">//文件访问路径</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> endpoint + <span class="string">&quot;/&quot;</span>+ bucket + <span class="string">&quot;/&quot;</span> + localFileName;</span><br><span class="line">        log.info(<span class="string">&quot;文件---[&#123;&#125;]---上传到S3服务器成功！&quot;</span>,url);</span><br><span class="line">        <span class="keyword">return</span> localFileName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取文件的stream对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> url</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> InputStream <span class="title function_">getInputStream</span><span class="params">(String url)</span>&#123;</span><br><span class="line">        <span class="type">S3Object</span> <span class="variable">s3Object</span> <span class="operator">=</span> client.getObject(<span class="keyword">new</span> <span class="title class_">GetObjectRequest</span>(bucket, url));</span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> s3Object.getObjectContent();</span><br><span class="line">        <span class="keyword">return</span> inputStream;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hsyk.bright.client.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.multipart.MultipartFile;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.security.MessageDigest;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FileMd5Util</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 文件md5值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> multipartFile</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getFileMd5Value</span><span class="params">(MultipartFile multipartFile)</span> &#123;</span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">in</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            in = multipartFile.getInputStream();</span><br><span class="line">            <span class="type">byte</span>[] buffer = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">2048</span>];</span><br><span class="line">            <span class="type">MessageDigest</span> <span class="variable">digest</span> <span class="operator">=</span> MessageDigest.getInstance(<span class="string">&quot;MD5&quot;</span>);</span><br><span class="line">            <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> in.read(buffer, <span class="number">0</span>, <span class="number">2048</span>);</span><br><span class="line">                <span class="keyword">if</span> (len != -<span class="number">1</span>) &#123;</span><br><span class="line">                    digest.update(buffer, <span class="number">0</span>, len);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            in.close();</span><br><span class="line">            <span class="type">byte</span>[] md5Bytes = digest.digest();</span><br><span class="line">            <span class="type">StringBuffer</span> <span class="variable">hexValue</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>();</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; md5Bytes.length; i++) &#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">val</span> <span class="operator">=</span> ((<span class="type">int</span>) md5Bytes[i]) &amp; <span class="number">0xff</span>;</span><br><span class="line">                <span class="keyword">if</span> (val &lt; <span class="number">16</span>) &#123;</span><br><span class="line">                    hexValue.append(<span class="string">&quot;0&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                hexValue.append(Integer.toHexString(val));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> hexValue.toString();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;获取文件md5失败&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                in.close();</span><br><span class="line"></span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException ex) &#123;</span><br><span class="line">                log.error(<span class="string">&quot;关闭流异常&quot;</span>, ex);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="在渲染图片时需自定义配置注入BufferedImageHttpMessageConverter"><a href="#在渲染图片时需自定义配置注入BufferedImageHttpMessageConverter" class="headerlink" title="在渲染图片时需自定义配置注入BufferedImageHttpMessageConverter"></a>在渲染图片时需自定义配置注入BufferedImageHttpMessageConverter</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hsyk.bright.client.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.converter.BufferedImageHttpMessageConverter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.converter.HttpMessageConverter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.WebMvcConfigurer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebMvcConfig</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 增加图片转换器</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> converters</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">extendMessageConverters</span><span class="params">(List&lt;HttpMessageConverter&lt;?&gt;&gt; converters)</span> &#123;</span><br><span class="line">        converters.add(<span class="keyword">new</span> <span class="title class_">BufferedImageHttpMessageConverter</span>());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="在使用-PathVariable注解接受地址栏携带”-“的参数时需注意以下配置"><a href="#在使用-PathVariable注解接受地址栏携带”-“的参数时需注意以下配置" class="headerlink" title="在使用@PathVariable注解接受地址栏携带”&#x2F;“的参数时需注意以下配置"></a>在使用@PathVariable注解接受地址栏携带”&#x2F;“的参数时需注意以下配置</h2><p>请求地址示例:</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://xxxxxxxx.com/aws/get/image/fx/fb9265fa192edc8cac0daff888c91f9d.jpeg</span><br></pre></td></tr></table></figure><p>其中image&#x2F;fx&#x2F;fb9265fa192edc8cac0daff888c91f9d.jpeg支持桶下多级目录</p><p>在配置请求地址时参数后面加上&#x2F;**</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/get/&#123;address&#125;/**&quot;)</span></span><br></pre></td></tr></table></figure><p>在获取地址参数时使用以下方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//处理请求参数中带目录/的参数</span></span><br><span class="line">      <span class="keyword">final</span> <span class="type">String</span> <span class="variable">pathQ</span> <span class="operator">=</span> request.getAttribute(HandlerMapping.PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE).toString();</span><br><span class="line">      <span class="keyword">final</span> <span class="type">String</span> <span class="variable">bestMatchingPattern</span> <span class="operator">=</span> request.getAttribute(HandlerMapping.BEST_MATCHING_PATTERN_ATTRIBUTE).toString();</span><br><span class="line">      <span class="type">String</span> <span class="variable">arguments</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AntPathMatcher</span>().extractPathWithinPattern(bestMatchingPattern, pathQ);</span><br><span class="line"><span class="comment">// moduleName为想要的参数</span></span><br><span class="line">      String moduleName;</span><br><span class="line">      <span class="keyword">if</span> (StringUtils.isNotBlank(arguments)) &#123;</span><br><span class="line">          moduleName = address + <span class="string">&#x27;/&#x27;</span> + arguments;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          moduleName = address;</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Springboot </tag>
            
            <tag> java </tag>
            
            <tag> oss </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mysql 删除重复数据</title>
      <link href="/posts/3265730413.html"/>
      <url>/posts/3265730413.html</url>
      
        <content type="html"><![CDATA[<h1 id="Mysql如何删除重复数据"><a href="#Mysql如何删除重复数据" class="headerlink" title="Mysql如何删除重复数据"></a>Mysql如何删除重复数据</h1><h2 id="项目背景："><a href="#项目背景：" class="headerlink" title="项目背景："></a>项目背景：</h2><p>在RocketMQ的消费者服务中，发现了重复消费的情况，为了处理，需先将消费者停止消费，去重消息ID重复的数据，再给消息ID设置唯一索引。</p><h3 id="方法一：使用临时表"><a href="#方法一：使用临时表" class="headerlink" title="方法一：使用临时表"></a><strong>方法一：使用临时表</strong></h3><ul><li>创建一个临时表，用于存储要保留的数据。</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> consumer_crm_record_tmp <span class="keyword">LIKE</span> consumer_crm_record;</span><br></pre></td></tr></table></figure><ul><li>将要保留的数据存储到临时表中</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> consumer_crm_record_tmp</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">MAX</span>(id) <span class="keyword">AS</span> id,message_id,message,response</span><br><span class="line"><span class="keyword">FROM</span> consumer_crm_record</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> message_id;</span><br></pre></td></tr></table></figure><ul><li>删除原表中的数据</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span>  consumer_crm_record</span><br></pre></td></tr></table></figure><ul><li>将临时表中的数据加入到原表中</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> consumer_crm_record</span><br><span class="line"><span class="keyword">SELECT</span>  id,message_id,message,response</span><br><span class="line"><span class="keyword">FROM</span> consumer_crm_record_tmp;</span><br></pre></td></tr></table></figure><ul><li>删除临时表</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> consumer_crm_record_tmp;</span><br></pre></td></tr></table></figure><p>创建临时表的优点：</p><ul><li>简单直观：通过创建临时表，您可以明确地将要删除的数据和要保留的数据分开存储，易于理解和管理。</li><li>可读性好：临时表的使用可以使查询语句更易读，特别是对于复杂的逻辑操作。</li><li>可以灵活处理：临时表可以在多个查询之间使用，可以执行额外的操作，例如插入、更新或查询临时表的数据。</li></ul><p>创建临时表的缺点：</p><ul><li>需要额外的存储空间：创建临时表需要占用额外的存储空间，特别是在处理大量数据时可能会对磁盘空间造成一定的压力。</li><li>需要额外的操作及权限：创建、插入和删除临时表需要执行额外的数据库操作，增加了一定的复杂性。</li></ul><h3 id="方法二：使用left-join-删除（强烈推荐）"><a href="#方法二：使用left-join-删除（强烈推荐）" class="headerlink" title="方法二：使用left join 删除（强烈推荐）"></a><strong>方法二：使用left join 删除（强烈推荐）</strong></h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> t1 </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">        consumer_crm_record t1</span><br><span class="line">        <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> ( <span class="keyword">SELECT</span> <span class="built_in">MAX</span>( id ) <span class="keyword">AS</span> max_id, message_id <span class="keyword">FROM</span> consumer_crm_record <span class="keyword">GROUP</span> <span class="keyword">BY</span> message_id ) t2 <span class="keyword">ON</span> t1.message_id <span class="operator">=</span> t2.message_id </span><br><span class="line">        <span class="keyword">AND</span> t1.id <span class="operator">=</span> t2.max_id </span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">        t2.max_id <span class="keyword">IS</span> <span class="keyword">NULL</span>;</span><br></pre></td></tr></table></figure><p>这个查询将根据message_id进行分组，并保留每个组中的最大id。然后，它使用左连接将原始表与这些最大id进行比较。如果连接失败（即max_id为NULL），则表示该行不是具有最大id的行，因此将被删除。</p><p>LEFT JOIN的优点：</p><ul><li>可以利用索引：LEFT JOIN 可以利用索引来加速查询，特别是在连接字段上存在索引的情况下。</li><li>更高的灵活性：LEFT JOIN 可以与其他表达式和条件组合使用，使得查询可以更加灵活。</li></ul><p>LEFT JOIN的缺点：</p><ul><li>性能可能受限：当处理大量数据时，LEFT JOIN 可能会导致较慢的查询速度，尤其是在连接字段没有索引或使用了复杂的连接条件时。</li><li>查询复杂度高：使用 LEFT JOIN 进行连接查询时，需要编写较为复杂的查询语句，对于新手而言可能会比较困难。</li></ul><h3 id="方法三：使用not-in-删除"><a href="#方法三：使用not-in-删除" class="headerlink" title="方法三：使用not in 删除"></a><strong>方法三：使用not in 删除</strong></h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line"> consumer_crm_record t1 </span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line"> id <span class="keyword">NOT</span> <span class="keyword">IN</span> ( <span class="keyword">SELECT</span> max_id <span class="keyword">FROM</span> ( <span class="keyword">SELECT</span> <span class="built_in">MAX</span>( id ) <span class="keyword">AS</span> max_id <span class="keyword">FROM</span> consumer_crm_record <span class="keyword">GROUP</span> <span class="keyword">BY</span> message_id) tmp );</span><br></pre></td></tr></table></figure><p>NOT IN的优点：</p><ul><li>简单易用：NOT IN 是一种直观简单的方式来筛选出不在指定列表中的数据。</li><li>可读性好：NOT IN 子句的语义明确，易于理解和维护。</li></ul><p>NOT IN的缺点：</p><ul><li>性能可能较低：NOT IN 子查询对于大型数据集可能会导致较慢的查询速度，尤其是在子查询中返回大量结果时。</li><li>NULL 值处理：NOT IN 子句在处理 NULL 值时需要特别注意，因为 NULL 的处理可能会导致意外的结果。</li></ul><h3 id="方法四：使用窗口函数（MySQL-8-0以上支持）"><a href="#方法四：使用窗口函数（MySQL-8-0以上支持）" class="headerlink" title="方法四：使用窗口函数（MySQL 8.0以上支持）"></a><strong>方法四：使用窗口函数（MySQL 8.0以上支持）</strong></h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DELETE</span></span><br><span class="line"><span class="keyword">FROM</span> consumer_crm_record</span><br><span class="line"><span class="keyword">WHERE</span> id <span class="keyword">in</span> (</span><br><span class="line">    <span class="keyword">SELECT</span> id</span><br><span class="line">    <span class="keyword">FROM</span>(</span><br><span class="line">        <span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line">        <span class="keyword">FROM</span> (</span><br><span class="line">            <span class="keyword">SELECT</span> <span class="built_in">ROW_NUMBER</span>() <span class="keyword">OVER</span> w <span class="keyword">AS</span> row_num,id</span><br><span class="line">            <span class="keyword">FROM</span> consumer_crm_record  <span class="keyword">where</span> message_id <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">null</span></span><br><span class="line">            <span class="keyword">WINDOW</span> w <span class="keyword">AS</span> (<span class="keyword">PARTITION</span> <span class="keyword">BY</span> message_id <span class="keyword">ORDER</span> <span class="keyword">BY</span> id)</span><br><span class="line">        )t</span><br><span class="line">        <span class="keyword">WHERE</span> row_num <span class="operator">&gt;</span><span class="number">1</span></span><br><span class="line">    )e</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>窗口函数的优点：</p><ul><li>简化查询逻辑：使用窗口函数可以在单个查询中完成去重操作，而不需要使用其他复杂的子查询或连接操作。这简化了查询逻辑，使查询更易读和维护。</li><li>高效性能：窗口函数在处理大型数据集时通常比传统的子查询或连接操作更高效。窗口函数可以在单个扫描中计算结果，而不需要多次访问数据表。</li><li>保留原始数据：使用窗口函数进行去重操作时，您可以保留原始数据表中的所有列，并在结果中添加去重的标识。这使得您可以查看去重结果与原始数据之间的关系，并进行进一步的分析和处理。</li></ul><p>窗口函数的缺点：</p><ul><li>学习曲线：窗口函数是一种高级的SQL功能，相对于传统的查询语法来说，使用窗口函数可能需要一些学习和理解。如果您对窗口函数不熟悉，可能需要花费一些时间来学习和了解其语法和用法。</li><li>版本兼容性：窗口函数在MySQL中的支持是在版本8.0之后引入的。如果您使用的是较旧的MySQL版本，那么窗口函数可能不可用，您将无法使用窗口函数进行去重操作。</li><li>内存消耗：窗口函数可能需要在内存中保存一些额外的中间结果，尤其是在处理大型数据集时。这可能会导致一些额外的内存消耗。因此，在使用窗口函数进行去重操作时，需要注意内存使用情况，并确保系统具有足够的内存资源。</li></ul><h3 id="创建唯一索引"><a href="#创建唯一索引" class="headerlink" title="创建唯一索引"></a><strong>创建唯一索引</strong></h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">UNIQUE</span> INDEX idx_message_id <span class="keyword">on</span> consumer_crm_record(message_id);</span><br></pre></td></tr></table></figure><h3 id="在百万级表中执行中发现报错：1206-the-total-number-of-locks-exceeds-the-lock-table-size"><a href="#在百万级表中执行中发现报错：1206-the-total-number-of-locks-exceeds-the-lock-table-size" class="headerlink" title="在百万级表中执行中发现报错：1206- the total number of locks exceeds the lock table size"></a><strong>在百万级表中执行中发现报错：1206- the total number of locks exceeds the lock table size</strong></h3><p>innodb_buffer_pool    mysql缓冲池太小  默认为16M</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span>  variables  <span class="keyword">like</span> <span class="string">&#x27;%innodb_buffer_pool_size%&#x27;</span></span><br></pre></td></tr></table></figure><p>修改缓冲池大小为2G</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SET</span> <span class="keyword">GLOBAL</span> innodb_buffer_pool_size<span class="operator">=</span><span class="number">2147483648</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一个注解搞定 Springboot 接口防刷</title>
      <link href="/posts/115329751.html"/>
      <url>/posts/115329751.html</url>
      
        <content type="html"><![CDATA[<h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><ul><li>首先是写一个注解类</li><li>拦截器中实现</li><li>注册到Springboot中</li><li>在Controller层中加入注解</li></ul><h2 id="首先是写一个注解类："><a href="#首先是写一个注解类：" class="headerlink" title="首先是写一个注解类："></a>首先是写一个注解类：</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Target;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> java.lang.annotation.ElementType.METHOD;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> java.lang.annotation.RetentionPolicy.RUNTIME;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Retention(RUNTIME)</span></span><br><span class="line"><span class="meta">@Target(METHOD)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> AccessLimit &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="title function_">seconds</span><span class="params">()</span>;</span><br><span class="line">    <span class="type">int</span> <span class="title function_">maxCount</span><span class="params">()</span>;</span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">needLogin</span><span class="params">()</span><span class="keyword">default</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="拦截器中实现："><a href="#拦截器中实现：" class="headerlink" title="拦截器中实现："></a>拦截器中实现：</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"><span class="keyword">import</span> com.access.limit.action.AccessLimit;</span><br><span class="line"><span class="keyword">import</span> com.access.limit.redis.RedisService;</span><br><span class="line"><span class="keyword">import</span> com.access.limit.result.CodeMsg;</span><br><span class="line"><span class="keyword">import</span> com.access.limit.result.Result;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.method.HandlerMethod;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.handler.HandlerInterceptorAdapter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.OutputStream;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PreventAttackInterceptor</span> <span class="keyword">extends</span> <span class="title class_">HandlerInterceptorAdapter</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisService redisService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//判断请求是否属于方法的请求</span></span><br><span class="line">        <span class="keyword">if</span>(handler <span class="keyword">instanceof</span> HandlerMethod)&#123;</span><br><span class="line"></span><br><span class="line">            <span class="type">HandlerMethod</span> <span class="variable">hm</span> <span class="operator">=</span> (HandlerMethod) handler;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//获取方法中的注解,看是否有该注解</span></span><br><span class="line">            <span class="type">AccessLimit</span> <span class="variable">accessLimit</span> <span class="operator">=</span> hm.getMethodAnnotation(AccessLimit.class);</span><br><span class="line">            <span class="keyword">if</span>(accessLimit == <span class="literal">null</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">int</span> <span class="variable">seconds</span> <span class="operator">=</span> accessLimit.seconds();</span><br><span class="line">            <span class="type">int</span> <span class="variable">maxCount</span> <span class="operator">=</span> accessLimit.maxCount();</span><br><span class="line">            <span class="type">boolean</span> <span class="variable">login</span> <span class="operator">=</span> accessLimit.needLogin();</span><br><span class="line">            <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> request.getRequestURI();</span><br><span class="line">            <span class="comment">//如果需要登录</span></span><br><span class="line">            <span class="keyword">if</span>(login)&#123;</span><br><span class="line">                <span class="comment">//获取登录的session进行判断</span></span><br><span class="line">                <span class="comment">//.....</span></span><br><span class="line">                key+=<span class="string">&quot;&quot;</span>+<span class="string">&quot;1&quot;</span>;  <span class="comment">//这里假设用户是1,项目中是动态获取的userId</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//从redis中获取用户访问的次数</span></span><br><span class="line">            <span class="type">AccessKey</span> <span class="variable">ak</span> <span class="operator">=</span> AccessKey.withExpire(seconds);</span><br><span class="line">            <span class="type">Integer</span> <span class="variable">count</span> <span class="operator">=</span> redisService.get(ak,key,Integer.class);</span><br><span class="line">            <span class="keyword">if</span>(count == <span class="literal">null</span>)&#123;</span><br><span class="line">                <span class="comment">//第一次访问</span></span><br><span class="line">                redisService.set(ak,key,<span class="number">1</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(count &lt; maxCount)&#123;</span><br><span class="line">                <span class="comment">//加1</span></span><br><span class="line">                redisService.incr(ak,key);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="comment">//超出访问次数</span></span><br><span class="line">                render(response,CodeMsg.ACCESS_LIMIT_REACHED); <span class="comment">//这里的CodeMsg是一个返回参数</span></span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">render</span><span class="params">(HttpServletResponse response, CodeMsg cm)</span><span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        response.setContentType(<span class="string">&quot;application/json;charset=UTF-8&quot;</span>);</span><br><span class="line">        <span class="type">OutputStream</span> <span class="variable">out</span> <span class="operator">=</span> response.getOutputStream();</span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span>  <span class="operator">=</span> JSON.toJSONString(Result.error(cm));</span><br><span class="line">        out.write(str.getBytes(<span class="string">&quot;UTF-8&quot;</span>));</span><br><span class="line">        out.flush();</span><br><span class="line">        out.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="注册到Springboot中"><a href="#注册到Springboot中" class="headerlink" title="注册到Springboot中"></a>注册到Springboot中</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.access.limit.ExceptionHander.PreventAttackInterceptor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.InterceptorRegistry;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.WebMvcConfigurerAdapter;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebConfig</span> <span class="keyword">extends</span> <span class="title class_">WebMvcConfigurerAdapter</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> PreventAttackInterceptor interceptor;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> &#123;</span><br><span class="line">        registry.addInterceptor(interceptor);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="在Controller层中加入注解"><a href="#在Controller层中加入注解" class="headerlink" title="在Controller层中加入注解"></a>在Controller层中加入注解</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.access.limit.result.Result;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ResponseBody;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PreventAttackController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AccessLimit(seconds=5, maxCount=5, needLogin=true)</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/preventAttack&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> Result&lt;String&gt; <span class="title function_">PreventAttack</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Result.success(<span class="string">&quot;请求成功&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Springboot </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot 3.2发布，新特性真香！</title>
      <link href="/posts/3819568216.html"/>
      <url>/posts/3819568216.html</url>
      
        <content type="html"><![CDATA[<p>Spring Boot 3.2最近发布了，让我们用 Java 21、GraalVM 和虚拟线程来尝试一下。</p><p>Spring Boot 3.2 支持：</p><ul><li>Java 21</li><li>虚拟线程</li><li>原生镜像（自 2022 年 11 月 Spring Boot 3.0 发布以来，Spring Boot 已在生产环境中支持 GraalVM 原生镜像）</li></ul><h2 id="Java-21"><a href="#Java-21" class="headerlink" title="Java 21"></a>Java 21</h2><p>我们期待 2023 年 9 月 19 日发布的 Java 21，Spring Boot 3.2 已经做到完全支持了。</p><p>正如所声明的那样，Java 21 提供了数千项性能、稳定性和安全性改进，包括平台增强功能，可帮助开发人员提高生产力并推动整个组织的创新和增长。</p><h2 id="虚拟线程"><a href="#虚拟线程" class="headerlink" title="虚拟线程"></a>虚拟线程</h2><p>更重要的更新之一是虚拟线程，这是 Project Loom 提供的功能。我们不打算深入细节，官方 JEP 提供了很好的解释：</p><blockquote><p><a href="https://openjdk.org/jeps/444">https://openjdk.org/jeps/444</a></p></blockquote><h2 id="GraalVM-和本机镜像"><a href="#GraalVM-和本机镜像" class="headerlink" title="GraalVM 和本机镜像"></a>GraalVM 和本机镜像</h2><p>GraalVM 是一种高性能 JDK，可以使用替代的即时 (JIT) 编译器来加快 Java 和基于 JVM 的应用程序的性能。</p><blockquote><p>Native Image 是一种提前将 Java 代码编译为独立可执行文件（称为本机映像）的技术。该可执行文件包括应用程序类、其依赖项中的类、运行时库类以及来自 JDK 的静态链接本机代码。</p><p>它不在 Java VM 上运行，但包含来自不同运行时系统的必要组件，如内存管理、线程调度等。与 JVM 相比，生成的程序具有更快的启动时间和更低的运行时内存开销。</p></blockquote><h2 id="尝鲜一下"><a href="#尝鲜一下" class="headerlink" title="尝鲜一下"></a>尝鲜一下</h2><p>让我们从安装 Java 21.0.1 graal 开始，最简单的方法是使用SDKMAN 并将其指定为您机器的默认 Java 版本：</p><ul><li>sdk install java 21.0.1-graal</li><li>sdk default java 21.0.1-graal</li></ul><p>另一种安装方法是手动下载</p><blockquote><p><a href="https://www.graalvm.org/downloads/">https://www.graalvm.org/downloads/</a></p></blockquote><p>我们将使用Spring Initializr页面创建一个新的Spring Boot项目，使用 Spring Boot 3.2.0、Java 21、Gradle-Groovy以及Spring Web和GraalVM本地支持依赖项。</p><p>要在 Spring Boot 3.2 中启用虚拟线程，我们只需在 application.yml 或 application.properties 文件中设置一个属性：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">spring.threads.virtual.enabled：true</span><br></pre></td></tr></table></figure><p>这个配置起到的作用：</p><ul><li>Tomcat 将使用虚拟线程来处理 HTTP 请求。这意味着处理 Web 请求的应用程序代码（例如控制器中的方法）将在虚拟线程上运行。</li><li>调用@Async方法时，Spring MVC 的异步请求处理和 Spring WebFlux 的阻塞执行支持现在将利用虚拟线程</li><li>标记有@Scheduled的方法将在虚拟线程上运行</li></ul><p>因此，我们将尝试使用这 3 个集成来实现虚拟线程。</p><p>此外，一些特定的集成将在虚拟线程上工作，例如 RabbitMQ&#x2F;Kafka 监听器，以及 Spring Data Redis&#x2F;Apache pulsar 相关的集成。但这些集成超出了本文的范围，有兴趣的可以参考 Spring Boot 3.2 官方示例。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p><strong>1.对于 Tomcat 传入的 HTTP 请求，我们创建一个简单的控制器：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/test&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestController</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Logger</span> <span class="variable">log</span> <span class="operator">=</span> LoggerFactory.getLogger(TestController.class);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;Rest controller method has been called &#123;&#125;&quot;</span>, Thread.currentThread());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>2.异步任务</strong></p><p>我们将在应用程序启动时调用其“run”方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AsyncTaskExecutorService</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Logger</span> <span class="variable">log</span> <span class="operator">=</span> LoggerFactory.getLogger(AsyncTaskExecutorService.class);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Async</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;Async task method has been called &#123;&#125;&quot;</span>, Thread.currentThread());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>3.Scheduled 定时任务</strong></p><p>一个简单的方法，每 15 秒调用一次</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SchedulerService</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Logger</span> <span class="variable">log</span> <span class="operator">=</span> LoggerFactory.getLogger(SchedulerService.class);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Scheduled(fixedDelayString = &quot;15000&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;Scheduled method has been called &#123;&#125;&quot;</span>, Thread.currentThread());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>让我们运行我们的应用程序：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./gradlew bootRun</span><br></pre></td></tr></table></figure><p>并调用我们的端点</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl — location — request GET ‘localhost:8085/test’</span><br></pre></td></tr></table></figure><p>我们得到什么：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Starting AppApplication using Java 21.0.1 with PID 38126</span><br><span class="line">Started AppApplication in 1.131 seconds (process running for 1.491)</span><br><span class="line">Async task method has been called VirtualThread[#52,task-1]/runnable@ForkJoinPool-1-worker-5</span><br><span class="line">Scheduled method has been called VirtualThread[#46,scheduling-1]/runnable@ForkJoinPool-1-worker-1</span><br><span class="line">Rest controller method has been called VirtualThread[#62,tomcat-handler-0]/runnable@ForkJoinPool-1-worker-1</span><br><span class="line">Scheduled method has been called VirtualThread[#46,scheduling-1]/runnable@ForkJoinPool-1-worker-1</span><br></pre></td></tr></table></figure><p>我们可以看到我们的方法的日志链接到公共 ForkJoinPool 线程池。</p><p>根据JEP：预期行为：</p><p>JDK 的虚拟线程调度程序是一个工作窃取的 ForkJoinPool，它以 FIFO 模式运行。调度程序的并行度是可用于调度虚拟线程的平台线程的数量。</p><p>现在让我们在 GraalVM 上运行它。</p><p>首先，我们需要构建一个 GraalVM 本机映像：（此命令可能需要几分钟）然后运行：（使用您的应用程序的名称而不是“app”）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">./gradlew nativeCompile</span><br><span class="line"></span><br><span class="line">./build/native/nativeComplie/app</span><br></pre></td></tr></table></figure><p>它也可以工作，并且启动时间要快得多，这符合声明的“与 JVM 相比，生成的程序具有更快的启动时间和更低的运行时内存开销”。</p><p>在这里您可以找到包含本文中使用的代码的存储库来源：</p><blockquote><p><a href="https://github.com/egor-ponomarev/spring-boot3.2-with-graalvm-virtual-threads-example">https://github.com/egor-ponomarev/spring-boot3.2-with-graalvm-virtual-threads-example</a></p></blockquote><h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>Spring Boot 3.2 是我们一直在等待的东西！具有虚拟线程的本机映像允许我们编写能够提供与 Go 类似级别的性能和可扩展性的代码，从而保持 JVM 的强大生态系统。</p><p>但是，您必须考虑到并非所有库都已采用其代码来与虚拟线程正常工作（在大多数情况下，它正在用 ReentrantLock 替换“synchronize”块），您应该小心虚拟线程将使用的逻辑。</p><blockquote><p>来源：<a href="https://medium.com/@egorponomarev">https://medium.com/@egorponomarev</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Springboot </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Elasticsearch查询中的must和should混合使用的行为解析</title>
      <link href="/posts/529135365.html"/>
      <url>/posts/529135365.html</url>
      
        <content type="html"><![CDATA[<h1 id="ElasticSearch查询中的must和should混合使用的行为解析"><a href="#ElasticSearch查询中的must和should混合使用的行为解析" class="headerlink" title="ElasticSearch查询中的must和should混合使用的行为解析"></a>ElasticSearch查询中的must和should混合使用的行为解析</h1><p>最近在做能力开放平台，其中的功能包含日志的查看，根据用户展示对应的日志信息，在根据用户权限查询相应的日志的时候发现同时使用<code>must</code>和<code>should</code>查询日志时会查到一些本不符合条件的数据，特此记录。</p><p><img src="https://fx-blog-images.oss-cn-beijing.aliyuncs.com/java/elastic-logo-H-full_color_ee411853-9a41-4fd0-b538-63bd5db7672b.png" alt="img"></p><p>在ElasticSearch中，我们可以使用<code>must</code>和<code>should</code>子句来构建复杂的查询。<code>must</code>子句表示所有条件都必须满足才能匹配文档，而<code>should</code>子句表示其中至少一个条件满足即可匹配文档。</p><p>然而，当<code>should</code>子句下的所有条件都不满足时，仍然可能查询出结果的情况可能会让人感到困惑。这是由于ElasticSearch的查询机制中的一个特性所导致的。</p><h2 id="查询机制解析"><a href="#查询机制解析" class="headerlink" title="查询机制解析"></a>查询机制解析</h2><p>ElasticSearch在处理查询时，会计算每个文档的相关性得分（relevance score），并根据得分进行排序。而<code>should</code>子句下的条件并不是强制要求满足的条件，而是用于调整相关性得分的因素。</p><p>当一个文档的<code>should</code>子句下的条件都不满足时，这些条件不会导致文档被排除在结果之外。相反，ElasticSearch会根据其他条件和相关性得分来决定文档是否匹配，并将其包含在结果中。</p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>如果您希望确保<code>should</code>子句下的条件必须满足才能匹配文档，可以使用布尔查询（bool query）的<code>minimum_should_match</code>参数。该参数指定了<code>should</code>子句下至少需要满足的条件数量。</p><p>以下是一个示例布尔查询的使用：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;query&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;bool&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;filter&quot;</span><span class="punctuation">:</span><span class="punctuation">[</span></span><br><span class="line">                <span class="punctuation">&#123;</span></span><br><span class="line">                    <span class="attr">&quot;range&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">                        <span class="attr">&quot;timeLocal.keyword&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">                            <span class="attr">&quot;from&quot;</span><span class="punctuation">:</span><span class="string">&quot;2023-11-23 00:00:00&quot;</span><span class="punctuation">,</span></span><br><span class="line">                            <span class="attr">&quot;to&quot;</span><span class="punctuation">:</span><span class="string">&quot;2023-11-23 23:59:59&quot;</span><span class="punctuation">,</span></span><br><span class="line">                            <span class="attr">&quot;include_lower&quot;</span><span class="punctuation">:</span><span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">                            <span class="attr">&quot;include_upper&quot;</span><span class="punctuation">:</span><span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">                            <span class="attr">&quot;boost&quot;</span><span class="punctuation">:</span><span class="number">1</span></span><br><span class="line">                        <span class="punctuation">&#125;</span></span><br><span class="line">                    <span class="punctuation">&#125;</span></span><br><span class="line">                <span class="punctuation">&#125;</span></span><br><span class="line">            <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;should&quot;</span><span class="punctuation">:</span><span class="punctuation">[</span></span><br><span class="line">                <span class="punctuation">&#123;</span></span><br><span class="line">                    <span class="attr">&quot;match_phrase&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">                        <span class="attr">&quot;appId.keyword&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">                            <span class="attr">&quot;query&quot;</span><span class="punctuation">:</span><span class="string">&quot;20231025001560&quot;</span><span class="punctuation">,</span></span><br><span class="line">                            <span class="attr">&quot;slop&quot;</span><span class="punctuation">:</span><span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">                            <span class="attr">&quot;zero_terms_query&quot;</span><span class="punctuation">:</span><span class="string">&quot;NONE&quot;</span><span class="punctuation">,</span></span><br><span class="line">                            <span class="attr">&quot;boost&quot;</span><span class="punctuation">:</span><span class="number">1</span></span><br><span class="line">                        <span class="punctuation">&#125;</span></span><br><span class="line">                    <span class="punctuation">&#125;</span></span><br><span class="line">                <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="punctuation">&#123;</span></span><br><span class="line">                    <span class="attr">&quot;match_phrase&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">                        <span class="attr">&quot;appId.keyword&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">                            <span class="attr">&quot;query&quot;</span><span class="punctuation">:</span><span class="string">&quot;20231124009319&quot;</span><span class="punctuation">,</span></span><br><span class="line">                            <span class="attr">&quot;slop&quot;</span><span class="punctuation">:</span><span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">                            <span class="attr">&quot;zero_terms_query&quot;</span><span class="punctuation">:</span><span class="string">&quot;NONE&quot;</span><span class="punctuation">,</span></span><br><span class="line">                            <span class="attr">&quot;boost&quot;</span><span class="punctuation">:</span><span class="number">1</span></span><br><span class="line">                        <span class="punctuation">&#125;</span></span><br><span class="line">                    <span class="punctuation">&#125;</span></span><br><span class="line">                <span class="punctuation">&#125;</span></span><br><span class="line">            <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;minimum_should_match&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span> </span><br><span class="line">            <span class="attr">&quot;must&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">              <span class="punctuation">&#123;</span><span class="attr">&quot;exists&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="attr">&quot;field&quot;</span><span class="punctuation">:</span> <span class="string">&quot;appId&quot;</span><span class="punctuation">&#125;</span><span class="punctuation">&#125;</span></span><br><span class="line">            <span class="punctuation">]</span><span class="punctuation">,</span> </span><br><span class="line">            <span class="attr">&quot;adjust_pure_negative&quot;</span><span class="punctuation">:</span><span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;boost&quot;</span><span class="punctuation">:</span><span class="number">1</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;sort&quot;</span><span class="punctuation">:</span><span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;timeLocal.keyword&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;order&quot;</span><span class="punctuation">:</span><span class="string">&quot;desc&quot;</span></span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在上述示例中，<code>minimum_should_match</code>参数设置为1，表示<code>should</code>子句下至少需要满足1个条件才能匹配文档。</p><p>通过使用布尔查询和<code>minimum_should_match</code>参数，您可以更精确地控制查询结果，确保<code>should</code>子句下的条件满足的文档才被包含在结果中。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>在ElasticSearch中，同时使用<code>must</code>和<code>should</code>查询时，<code>should</code>子句下的条件不是强制要求满足的条件，而是用于调整相关性得分的因素。如果需要确保<code>should</code>子句下的条件必须满足才能匹配文档，可以使用布尔查询的<code>minimum_should_match</code>参数来控制条件的最小满足数量。这样可以更精确地过滤查询结果，符合预期的逻辑。</p><p>希望本篇博客能够帮助您理解ElasticSearch中<code>must</code>和<code>should</code>查询的行为，并提供解决方案来满足特定的查询需求。</p>]]></content>
      
      
      <categories>
          
          <category> NoSql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ElasticSearch </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>何氏早会分享-安常处顺</title>
      <link href="/posts/1069330390.html"/>
      <url>/posts/1069330390.html</url>
      
        <content type="html"><![CDATA[<h2 id="何为安常处顺"><a href="#何为安常处顺" class="headerlink" title="何为安常处顺"></a>何为安常处顺</h2><p>​出自战国·宋·庄周《庄子·养生主》：“适来，夫子时也；适去，夫子顺也。安时而处顺，哀乐不能入也。”</p><p>​安常处顺，是一种古老而智慧的生活哲学。它强调在面对生活中的各种变化和挑战时，保持内心的平静和从容，以及与周围环境和谐相处。</p><p>​安常意味着在日常生活中保持平静和冷静的心态。无论是遇到工作上的压力，还是个人生活中的困扰，我们都应该学会接受并适应变化，而不是过分焦虑或抵抗。通过保持内心的平和，我们能够更好地处理问题，并找到解决之道。</p><p>​处顺意味着与周围环境和谐相处。我们应该尊重自然的规律和他人的存在，不去强求和改变一切。与环境相处时，我们要学会适应和调整自己，以便更好地融入其中。与他人相处时，我们要尊重彼此的差异和个人选择，以建立和谐的关系。</p><p>​安常处顺不是消极和被动的态度，而是一种智慧和平衡的追求。它要求我们保持内心的稳定和平和，以应对生活中的起伏和挑战。通过接受变化、适应环境和与他人和谐相处，我们可以更好地把握机会，创造积极的结果。</p><h2 id="现代生活中的安常处顺"><a href="#现代生活中的安常处顺" class="headerlink" title="现代生活中的安常处顺"></a>现代生活中的安常处顺</h2><p>​在现代社会中，我们常常面临快节奏、高压力和不断变化的环境。安常处顺的理念提醒我们要保持内心的平静和从容，不被外界的干扰所动摇。它鼓励我们寻找内心的平衡和宁静，以实现生活的和谐与满足。</p><p>​因此，让我们在忙碌的生活中停下来，反思自己的内心状态。学会在面对挑战时保持冷静和平静，接受变化并适应环境。与他人相处时，尊重彼此的差异和选择，以建立和谐的关系。</p><h2 id="怎么做到安常处顺"><a href="#怎么做到安常处顺" class="headerlink" title="怎么做到安常处顺"></a>怎么做到安常处顺</h2><p>​接受现实：无论是面对个人挫折还是社会变迁，接受现实是”安常处顺”的重要一环。我们应该学会接受自己和周围环境的局限和不完美，不过分埋怨或抵抗现实。接受现实能够帮助我们更好地适应和解决问题。</p><p>​保持平静与从容：在面对压力、困难或挫折时，保持内心的平静和从容是”安常处顺”的关键。通过冷静思考和调整心态，我们能够更好地处理问题，做出明智的决策，而不是被情绪和情绪所控制。</p><p>​适应变化：生活中变化是不可避免的，学会适应变化是”安常处顺”的重要方面。我们应该灵活应对变化，调整自己的计划和期望。适应变化意味着我们能够更好地适应新的环境和条件，发现新的机会和可能性。</p><p>​和谐相处：”安常处顺”也包括与他人和谐相处。我们应该尊重他人的权利和观点，学会宽容和理解，减少冲突和争吵。通过建立良好的人际关系和合作，我们能够创造更加和谐和平的生活环境。</p><p>​寻找内心平静：”安常处顺”也强调寻找内心的平静和满足。通过冥想、放松技巧、培养兴趣爱好等方式，我们可以培养内心的平静和满足感，减轻焦虑和压力，提升生活的质量。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>​“安常处顺”并不是一种僵化的规则，而是一种智慧和生活态度，通过运用这一原则，我们能够在现实工作生活中更好地应对挑战和困境，创造出更加平静和幸福的生活。</p>]]></content>
      
      
      <categories>
          
          <category> 毒鸡汤 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 故事分享 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>人工智能的崛起与应用</title>
      <link href="/posts/2824493036.html"/>
      <url>/posts/2824493036.html</url>
      
        <content type="html"><![CDATA[<h1 id="人工智能的崛起与应用"><a href="#人工智能的崛起与应用" class="headerlink" title="人工智能的崛起与应用"></a>人工智能的崛起与应用</h1><p>人工智能（Artificial Intelligence，简称AI）是一项涉及模拟人类智能的技术和科学领域。随着计算能力的提升、数据的爆炸增长以及机器学习算法的进步，人工智能正以惊人的速度崛起，并在各个领域展示出巨大的潜力。</p><h2 id="机器学习与深度学习"><a href="#机器学习与深度学习" class="headerlink" title="机器学习与深度学习"></a>机器学习与深度学习</h2><p>机器学习是人工智能的核心技术之一，它通过让计算机从数据中学习和改进，而不是显式地进行编程。深度学习则是机器学习的一个分支，它模仿人脑神经网络的结构和功能，能够处理更加复杂的任务。这些技术的发展使得机器能够自动进行模式识别、语音识别、图像处理等任务，极大地扩展了人工智能的应用范围。</p><h2 id="人工智能的应用领域"><a href="#人工智能的应用领域" class="headerlink" title="人工智能的应用领域"></a>人工智能的应用领域</h2><p>人工智能已经渗透到了各个领域，对我们的生活和社会产生了深远的影响。以下是一些人工智能应用的例子：</p><ul><li><strong>自然语言处理（NLP）</strong>：人工智能可以理解和处理自然语言，实现智能翻译、语音助手、智能客服等功能。</li><li><strong>计算机视觉</strong>：人工智能能够识别图像和视频中的对象、场景和动作，应用于人脸识别、无人驾驶、安防监控等领域。</li><li><strong>医疗健康</strong>：人工智能可以辅助医生进行诊断和治疗决策，提高医疗效率和精确度。</li><li><strong>金融领域</strong>：人工智能在风险评估、欺诈检测、投资分析等方面发挥着重要作用。</li><li><strong>智能制造</strong>：人工智能可以优化生产流程、预测设备故障，并实现智能物流和自动化控制等。</li></ul><h2 id="人工智能的挑战与未来"><a href="#人工智能的挑战与未来" class="headerlink" title="人工智能的挑战与未来"></a>人工智能的挑战与未来</h2><p>尽管人工智能取得了巨大的进展，但仍然存在一些挑战。其中包括数据隐私和安全性、人工智能的透明度与可解释性、人工智能在就业市场中的影响等问题。解决这些问题需要跨学科的合作和持续的研究。</p><p>展望未来，人工智能将继续发展和应用于更多领域。我们可以期待更加智能化的智能助手、更加智能的交通系统、更加智能的医疗设备等。同时，我们也需要确保人工智能的发展是可持续和符合伦理的，以实现人工智能对社会的最大利益。</p><p>希望这篇博客能够给你提供一些关于人工智能的基本了解和启发。人工智能是一个令人兴奋的领域，它将继续引领科技和社会的发展，为我们创造更多的机遇和挑战。</p><p>参考资料：</p><ul><li><a href="https://www.ibm.com/cloud/learn/what-is-artificial-intelligence">What is Artificial Intelligence (AI)?</a></li><li><a href="https://www.sciencedirect.com/topics/computer-science/deep-learning">Deep Learning</a></li><li><a href="https://www.sas.com/en_us/insights/analytics/what-is-artificial-intelligence.html">Applications of Artificial Intelligence</a></li><li><a href="https://www.futurithmic.com/2020/04/13/the-challenges-and-risks-of-artificial-intelligence/">Challenges and Risks of Artificial Intelligence</a></li><li><a href="https://www.forbes.com/sites/cognitiveworld/2019/12/29/the-future-of-artificial-intelligence/?sh=6bbed6a3726c">The Future of Artificial Intelligence</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 人工智能 </tag>
            
            <tag> AI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>xxl-job实现自动注册</title>
      <link href="/posts/3148420360.html"/>
      <url>/posts/3148420360.html</url>
      
        <content type="html"><![CDATA[<h2 id="一、项目背景："><a href="#一、项目背景：" class="headerlink" title="一、项目背景："></a>一、项目背景：</h2><p><code>xxl-job</code>是一款非常优秀的任务调度中间件，轻量级、使用简单、支持分布式等优点，让它广泛应用在我们的项目中，解决了不少定时任务的调度问题。</p><p>我们都知道，在使用过程中需要先到<code>xxl-job</code>的任务调度中心页面上，配置执行器<code>executor</code>和具体的任务<code>job</code>，这一过程如果项目中的定时任务数量不多还好说，如果任务多了的话还是挺费工夫的。</p><p>假设项目中有上百个这样的定时任务，那么每个任务都需要走一遍绑定<code>jobHander</code>后端接口，填写<code>cron</code>表达式这个流程…</p><p>于是出于功能优化（<strong>偷懒</strong>）这一动机，有没有什么方法能够告别<code>xxl-job</code>的管理页面，能够让我不再需要到页面上去手动注册执行器和任务，实现让它们自动注册到调度中心呢。 </p><h2 id="二、分析："><a href="#二、分析：" class="headerlink" title="二、分析："></a>二、分析：</h2><p>分析一下，其实我们要做的很简单，只要在项目启动时主动注册<code>executor</code>和各个<code>jobHandler</code>到调度中心就可以了，流程如下：</p><p><img src="https://fx-blog-images.oss-cn-beijing.aliyuncs.com/java/image-20231106134020383.png" alt="image-20231106134020383"></p><p>有的小伙伴们可能要问了，我在页面上创建<strong>执行器</strong>的时候，不是有一个选项叫做<strong>自动注册</strong>吗，为什么我们这里还要自己添加新执行器？</p><p>其实这里有个误区，这里的自动注册指的是会根据项目中配置的<code>xxl.job.executor.appname</code>，将配置的机器地址自动注册到这个执行器的地址列表中。但是如果你之前没有手动创建过执行器，那么是不会给你自动添加一个新执行器到调度中心的。</p><p>既然有了想法咱们就直接开干，先到github上拉一份xxl-job的源码下来： </p><blockquote><p><a href="https://github.com/xuxueli/xxl-job">https://github.com/xuxueli/xxl-job</a></p></blockquote><p>整个项目导入idea后，先看一下结构:</p><p>结合着文档和代码，先梳理一下各个模块都是干什么的：</p><ul><li><code>xxl-job-admin</code>：任务调度中心，启动后就可以访问管理页面，进行执行器和任务的注册、以及任务调用等功能了</li><li><code>xxl-job-core</code>：公共依赖，项目中使用到xxl-job时要引入的依赖包</li><li><code>xxl-job-executor-samples</code>：执行示例，分别包含了springboot版本和不使用框架的版本</li></ul><p>为了弄清楚注册和查询<code>executor</code>和<code>jobHandler</code>调用的是哪些接口，我们先从页面上去抓一个请求看看：</p><p><img src="https://fx-blog-images.oss-cn-beijing.aliyuncs.com/java/image-20231106134216225.png" alt="image-20231106134216225"></p><p>好了，这样就能定位到<code>xxl-job-admin</code>模块中<code>/jobgroup/save</code>这个接口，接下来可以很容易地找到源码位置：</p><p><img src="https://fx-blog-images.oss-cn-beijing.aliyuncs.com/java/image-20231106134258341.png" alt="image-20231106134258341"></p><p>按照这个思路，可以找到下面这几个关键接口：</p><ul><li><code>/jobgroup/pageList</code>：执行器列表的条件查询</li><li><code>/jobgroup/save</code>：添加执行器</li><li><code>/jobinfo/pageList</code>：任务列表的条件查询</li><li><code>/jobinfo/add</code>：添加任务</li></ul><p>但是如果直接调用这些接口，那么就会发现它会跳转到<code>xxl-job-admin</code>的的登录页面</p><p>其实想想也明白，出于安全性考虑，调度中心的接口也不可能允许裸调的。那么再回头看一下刚才页面上的请求就会发现，它在<code>Headers</code>中添加了一条名为<code>XXL_JOB_LOGIN_IDENTITY</code>的<code>cookie</code>：</p><p><img src="https://fx-blog-images.oss-cn-beijing.aliyuncs.com/java/image-20231106134412832.png" alt="image-20231106134412832"></p><p>至于这条<code>cookie</code>，则是在通过用户名和密码调用调度中心的<code>/login</code>接口时返回的，在返回的<code>response</code>可以直接拿到。只要保存下来，并在之后每次请求时携带，就能够正常访问其他接口了。</p><p>到这里，我们需要的5个接口就基本准备齐了，接下来准备开始正式的改造工作。 </p><h2 id="三、改造"><a href="#三、改造" class="headerlink" title="三、改造"></a>三、改造</h2><p>我们改造的目的是实现一个<code>starter</code>，以后只要引入这个<code>starter</code>就能实现<code>executor</code>和<code>jobHandler</code>的自动注册，要引入的关键依赖有下面两个：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-autoconfigure<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- xxl-job-core --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.xuxueli<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>xxl-job-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;xxl-job.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="1-接口调用"><a href="#1-接口调用" class="headerlink" title="1.接口调用"></a>1.接口调用</h4><p>在调用调度中心的接口前，先把<code>xxl-job-admin</code>模块中的<code>XxlJobInfo</code>和<code>XxlJobGroup</code>这两个类拿到我们的starter项目中，用于接收接口调用的结果。</p><h5 id="登录接口"><a href="#登录接口" class="headerlink" title="登录接口"></a>登录接口</h5><p>创建一个<code>JobLoginService</code>，在调用业务接口前，需要通过登录接口获取<code>cookie</code>，并在获取到<code>cookie</code>后，缓存到本地的<code>Map</code>中。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Map&lt;String,String&gt; loginCookie=<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">login</span><span class="params">()</span> &#123;</span><br><span class="line">    String url=adminAddresses+<span class="string">&quot;/login&quot;</span>;</span><br><span class="line">    <span class="type">HttpResponse</span> <span class="variable">response</span> <span class="operator">=</span> HttpRequest.post(url)</span><br><span class="line">            .form(<span class="string">&quot;userName&quot;</span>,username)</span><br><span class="line">            .form(<span class="string">&quot;password&quot;</span>,password)</span><br><span class="line">            .execute();</span><br><span class="line">    List&lt;HttpCookie&gt; cookies = response.getCookies();</span><br><span class="line">    Optional&lt;HttpCookie&gt; cookieOpt = cookies.stream()</span><br><span class="line">            .filter(cookie -&gt; cookie.getName().equals(<span class="string">&quot;XXL_JOB_LOGIN_IDENTITY&quot;</span>)).findFirst();</span><br><span class="line">    <span class="keyword">if</span> (!cookieOpt.isPresent())</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;get xxl-job cookie error!&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">String</span> <span class="variable">value</span> <span class="operator">=</span> cookieOpt.get().getValue();</span><br><span class="line">    loginCookie.put(<span class="string">&quot;XXL_JOB_LOGIN_IDENTITY&quot;</span>,value);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其他接口在调用时，直接从缓存中获取<code>cookie</code>，如果缓存中不存在则调用<code>/login</code>接口，为了避免这一过程失败，允许最多重试3次。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> String <span class="title function_">getCookie</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">cookieStr</span> <span class="operator">=</span> loginCookie.get(<span class="string">&quot;XXL_JOB_LOGIN_IDENTITY&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (cookieStr !=<span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;XXL_JOB_LOGIN_IDENTITY=&quot;</span>+cookieStr;</span><br><span class="line">        &#125;</span><br><span class="line">        login();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;get xxl-job cookie error!&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="执行器接口"><a href="#执行器接口" class="headerlink" title="执行器接口"></a>执行器接口</h5><p>创建一个<code>JobGroupService</code>，根据<code>appName</code>和执行器名称<code>title</code>查询执行器列表：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> List&lt;XxlJobGroup&gt; <span class="title function_">getJobGroup</span><span class="params">()</span> &#123;</span><br><span class="line">    String url=adminAddresses+<span class="string">&quot;/jobgroup/pageList&quot;</span>;</span><br><span class="line">    <span class="type">HttpResponse</span> <span class="variable">response</span> <span class="operator">=</span> HttpRequest.post(url)</span><br><span class="line">            .form(<span class="string">&quot;appname&quot;</span>, appName)</span><br><span class="line">            .form(<span class="string">&quot;title&quot;</span>, title)</span><br><span class="line">            .cookie(jobLoginService.getCookie())</span><br><span class="line">            .execute();</span><br><span class="line"></span><br><span class="line">    <span class="type">String</span> <span class="variable">body</span> <span class="operator">=</span> response.body();</span><br><span class="line">    <span class="type">JSONArray</span> <span class="variable">array</span> <span class="operator">=</span> JSONUtil.parse(body).getByPath(<span class="string">&quot;data&quot;</span>, JSONArray.class);</span><br><span class="line">    List&lt;XxlJobGroup&gt; list = array.stream()</span><br><span class="line">            .map(o -&gt; JSONUtil.toBean((JSONObject) o, XxlJobGroup.class))</span><br><span class="line">            .collect(Collectors.toList());</span><br><span class="line">    <span class="keyword">return</span> list;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们在后面要根据配置文件中的<code>appName</code>和<code>title</code>判断当前执行器是否已经被注册到调度中心过，如果已经注册过那么则跳过，而<code>/jobgroup/pageList</code>接口是一个模糊查询接口，所以在查询列表的结果列表中，还需要再进行一次精确匹配。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">preciselyCheck</span><span class="params">()</span> &#123;</span><br><span class="line">    List&lt;XxlJobGroup&gt; jobGroup = getJobGroup();</span><br><span class="line">    Optional&lt;XxlJobGroup&gt; has = jobGroup.stream()</span><br><span class="line">            .filter(xxlJobGroup -&gt; xxlJobGroup.getAppname().equals(appName)</span><br><span class="line">                    &amp;&amp; xxlJobGroup.getTitle().equals(title))</span><br><span class="line">            .findAny();</span><br><span class="line">    <span class="keyword">return</span> has.isPresent();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注册新<code>executor</code>到调度中心：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">autoRegisterGroup</span><span class="params">()</span> &#123;</span><br><span class="line">    String url=adminAddresses+<span class="string">&quot;/jobgroup/save&quot;</span>;</span><br><span class="line">    <span class="type">HttpResponse</span> <span class="variable">response</span> <span class="operator">=</span> HttpRequest.post(url)</span><br><span class="line">            .form(<span class="string">&quot;appname&quot;</span>, appName)</span><br><span class="line">            .form(<span class="string">&quot;title&quot;</span>, title)</span><br><span class="line">            .cookie(jobLoginService.getCookie())</span><br><span class="line">            .execute();</span><br><span class="line">    <span class="type">Object</span> <span class="variable">code</span> <span class="operator">=</span> JSONUtil.parse(response.body()).getByPath(<span class="string">&quot;code&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> code.equals(<span class="number">200</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="任务接口"><a href="#任务接口" class="headerlink" title="任务接口"></a>任务接口</h5><p>创建一个<code>JobInfoService</code>，根据执行器<code>id</code>，<code>jobHandler</code>名称查询任务列表，和上面一样，也是模糊查询：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> List&lt;XxlJobInfo&gt; <span class="title function_">getJobInfo</span><span class="params">(Integer jobGroupId,String executorHandler)</span> &#123;</span><br><span class="line">    String url=adminAddresses+<span class="string">&quot;/jobinfo/pageList&quot;</span>;</span><br><span class="line">    <span class="type">HttpResponse</span> <span class="variable">response</span> <span class="operator">=</span> HttpRequest.post(url)</span><br><span class="line">            .form(<span class="string">&quot;jobGroup&quot;</span>, jobGroupId)</span><br><span class="line">            .form(<span class="string">&quot;executorHandler&quot;</span>, executorHandler)</span><br><span class="line">            .form(<span class="string">&quot;triggerStatus&quot;</span>, -<span class="number">1</span>)</span><br><span class="line">            .cookie(jobLoginService.getCookie())</span><br><span class="line">            .execute();</span><br><span class="line"></span><br><span class="line">    <span class="type">String</span> <span class="variable">body</span> <span class="operator">=</span> response.body();</span><br><span class="line">    <span class="type">JSONArray</span> <span class="variable">array</span> <span class="operator">=</span> JSONUtil.parse(body).getByPath(<span class="string">&quot;data&quot;</span>, JSONArray.class);</span><br><span class="line">    List&lt;XxlJobInfo&gt; list = array.stream()</span><br><span class="line">            .map(o -&gt; JSONUtil.toBean((JSONObject) o, XxlJobInfo.class))</span><br><span class="line">            .collect(Collectors.toList());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> list;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注册一个新任务，最终返回创建的新任务的<code>id</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Integer <span class="title function_">addJobInfo</span><span class="params">(XxlJobInfo xxlJobInfo)</span> &#123;</span><br><span class="line">    String url=adminAddresses+<span class="string">&quot;/jobinfo/add&quot;</span>;</span><br><span class="line">    Map&lt;String, Object&gt; paramMap = BeanUtil.beanToMap(xxlJobInfo);</span><br><span class="line">    <span class="type">HttpResponse</span> <span class="variable">response</span> <span class="operator">=</span> HttpRequest.post(url)</span><br><span class="line">            .form(paramMap)</span><br><span class="line">            .cookie(jobLoginService.getCookie())</span><br><span class="line">            .execute();</span><br><span class="line"></span><br><span class="line">    <span class="type">JSON</span> <span class="variable">json</span> <span class="operator">=</span> JSONUtil.parse(response.body());</span><br><span class="line">    <span class="type">Object</span> <span class="variable">code</span> <span class="operator">=</span> json.getByPath(<span class="string">&quot;code&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (code.equals(<span class="number">200</span>))&#123;</span><br><span class="line">        <span class="keyword">return</span> Convert.toInt(json.getByPath(<span class="string">&quot;content&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;add jobInfo error!&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2、创建新注解"><a href="#2、创建新注解" class="headerlink" title="2、创建新注解"></a>2、创建新注解</h4><p>在创建任务时，必填字段除了执行器和<code>jobHandler</code>之外，还有<strong>任务描述</strong>、<strong>负责人</strong>、<strong>Cron表达式</strong>、<strong>调度类型</strong>、<strong>运行模式</strong>。在这里，我们默认调度类型为<code>CRON</code>、运行模式为<code>BEAN</code>，另外的3个字段的信息需要用户指定。</p><p>因此我们需要创建一个新注解<code>@XxlRegister</code>，来配合原生的<code>@XxlJob</code>注解进行使用，填写这几个字段的信息：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target(&#123;ElementType.METHOD&#125;)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> XxlRegister &#123;</span><br><span class="line">    String <span class="title function_">cron</span><span class="params">()</span>;</span><br><span class="line">    String <span class="title function_">jobDesc</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;default jobDesc&quot;</span>;</span><br><span class="line">    String <span class="title function_">author</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;default Author&quot;</span>;</span><br><span class="line">    <span class="type">int</span> <span class="title function_">triggerStatus</span><span class="params">()</span> <span class="keyword">default</span> <span class="number">0</span>;</span><br><span class="line">    String <span class="title function_">executorRouteStrategy</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;ROUND&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后，额外添加了<code>triggerStatus</code>属性和<code>executorRouteStrategy</code> ，表示任务的默认调度状态，0为停止状态，1为运行状态和调度策略默认为轮询ROUND，FIRST为第一个。</p><h4 id="3、自动注册核心"><a href="#3、自动注册核心" class="headerlink" title="3、自动注册核心"></a>3、自动注册核心</h4><p>基本准备工作做完后，下面实现自动注册执行器和<code>jobHandler</code>的核心代码。核心类实现<code>ApplicationListener</code>接口，在接收到<code>ApplicationReadyEvent</code>事件后开始执行自动注册逻辑。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">XxlJobAutoRegister</span> <span class="keyword">implements</span> <span class="title class_">ApplicationListener</span>&lt;ApplicationReadyEvent&gt;, </span><br><span class="line">        ApplicationContextAware &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Log</span> <span class="variable">log</span> <span class="operator">=</span>LogFactory.get();</span><br><span class="line">    <span class="keyword">private</span> ApplicationContext applicationContext;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JobGroupService jobGroupService;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JobInfoService jobInfoService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setApplicationContext</span><span class="params">(ApplicationContext applicationContext)</span> <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line">        <span class="built_in">this</span>.applicationContext=applicationContext;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onApplicationEvent</span><span class="params">(ApplicationReadyEvent event)</span> &#123;</span><br><span class="line">        addJobGroup();<span class="comment">//注册执行器</span></span><br><span class="line">        addJobInfo();<span class="comment">//注册任务</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>自动注册执行器的代码非常简单，根据配置文件中的<code>appName</code>和<code>title</code>精确匹配查看调度中心是否已有执行器被注册过了，如果存在则跳过，不存在则新注册一个：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">addJobGroup</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (jobGroupService.preciselyCheck())</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(jobGroupService.autoRegisterGroup())</span><br><span class="line">        log.info(<span class="string">&quot;auto register xxl-job group success!&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>自动注册任务的逻辑则相对复杂一些，需要完成：</p><ul><li>通过<code>applicationContext</code>拿到spring容器中的所有bean，再拿到这些bean中所有添加了<code>@XxlJob</code>注解的方法</li><li>对上面获取到的方法进行检查，是否添加了我们自定义的<code>@XxlRegister</code>注解，如果没有则跳过，不进行自动注册</li><li>对同时添加了<code>@XxlJob</code>和<code>@XxlRegister</code>的方法，通过执行器id和<code>jobHandler</code>的值判断是否已经在调度中心注册过了，如果已存在则跳过</li><li>对于满足注解条件且没有注册过的<code>jobHandler</code>，调用接口注册到调度中心</li></ul><p>具体代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">addJobInfo</span><span class="params">()</span> &#123;</span><br><span class="line">    List&lt;XxlJobGroup&gt; jobGroups = jobGroupService.getJobGroup();</span><br><span class="line">    <span class="type">XxlJobGroup</span> <span class="variable">xxlJobGroup</span> <span class="operator">=</span> jobGroups.get(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    String[] beanDefinitionNames = applicationContext.getBeanNamesForType(Object.class, <span class="literal">false</span>, <span class="literal">true</span>);</span><br><span class="line">    <span class="keyword">for</span> (String beanDefinitionName : beanDefinitionNames) &#123;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">bean</span> <span class="operator">=</span> applicationContext.getBean(beanDefinitionName);</span><br><span class="line"></span><br><span class="line">        Map&lt;Method, XxlJob&gt; annotatedMethods  = MethodIntrospector.selectMethods(bean.getClass(),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">MethodIntrospector</span>.MetadataLookup&lt;XxlJob&gt;() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="keyword">public</span> XxlJob <span class="title function_">inspect</span><span class="params">(Method method)</span> &#123;</span><br><span class="line">                        <span class="keyword">return</span> AnnotatedElementUtils.findMergedAnnotation(method, XxlJob.class);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">        <span class="keyword">for</span> (Map.Entry&lt;Method, XxlJob&gt; methodXxlJobEntry : annotatedMethods.entrySet()) &#123;</span><br><span class="line">            <span class="type">Method</span> <span class="variable">executeMethod</span> <span class="operator">=</span> methodXxlJobEntry.getKey();</span><br><span class="line">            <span class="type">XxlJob</span> <span class="variable">xxlJob</span> <span class="operator">=</span> methodXxlJobEntry.getValue();</span><br><span class="line"></span><br><span class="line">            <span class="comment">//自动注册</span></span><br><span class="line">            <span class="keyword">if</span> (executeMethod.isAnnotationPresent(XxlRegister.class)) &#123;</span><br><span class="line">                <span class="type">XxlRegister</span> <span class="variable">xxlRegister</span> <span class="operator">=</span> executeMethod.getAnnotation(XxlRegister.class);</span><br><span class="line">                List&lt;XxlJobInfo&gt; jobInfo = jobInfoService.getJobInfo(xxlJobGroup.getId(), xxlJob.value());</span><br><span class="line">                <span class="keyword">if</span> (!jobInfo.isEmpty())&#123;</span><br><span class="line">                    <span class="comment">//因为是模糊查询，需要再判断一次</span></span><br><span class="line">                    Optional&lt;XxlJobInfo&gt; first = jobInfo.stream()</span><br><span class="line">                            .filter(xxlJobInfo -&gt; xxlJobInfo.getExecutorHandler().equals(xxlJob.value()))</span><br><span class="line">                            .findFirst();</span><br><span class="line">                    <span class="keyword">if</span> (first.isPresent())</span><br><span class="line">                        <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="type">XxlJobInfo</span> <span class="variable">xxlJobInfo</span> <span class="operator">=</span> createXxlJobInfo(xxlJobGroup, xxlJob, xxlRegister);</span><br><span class="line">                <span class="type">Integer</span> <span class="variable">jobInfoId</span> <span class="operator">=</span> jobInfoService.addJobInfo(xxlJobInfo);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4、自动装配"><a href="#4、自动装配" class="headerlink" title="4、自动装配"></a>4、自动装配</h4><p>创建一个配置类，用于扫描<code>bean</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(basePackages = &quot;com.xxl.job.plus.executor&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">XxlJobPlusConfig</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将它添加到<code>META-INF/spring.factories</code>文件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">org.springframework.boot.autoconfigure.EnableAutoConfiguration=\</span><br><span class="line">  com.xxl.job.plus.executor.config.XxlJobPlusConfig</span><br></pre></td></tr></table></figure><p>到这里<code>starter</code>的编写就完成了，可以通过maven发布jar包到本地或者私服：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn clean install/deploy</span><br></pre></td></tr></table></figure><h2 id="四、使用"><a href="#四、使用" class="headerlink" title="四、使用"></a>四、使用</h2><p>基于springboot项目，引入我们在上面打好的包：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.hsyk&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;xxljob-autoregister-spring-boot-starter&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;0.0.1&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>在<code>application.yml</code>中配置xxl-job的信息，首先是原生的配置内容：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">xxl:</span></span><br><span class="line">  <span class="attr">job:</span></span><br><span class="line">    <span class="attr">accessToken:</span> <span class="string">default_token</span></span><br><span class="line">    <span class="attr">admin:</span></span><br><span class="line">      <span class="attr">addresses:</span> <span class="string">http://192.168.129.36:30080/xxl-job-admin</span></span><br><span class="line">      <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line">      <span class="attr">username:</span> <span class="string">admin</span></span><br><span class="line">    <span class="attr">executor:</span></span><br><span class="line">      <span class="attr">address:</span></span><br><span class="line">      <span class="attr">appname:</span> <span class="string">bright-sso-server</span></span><br><span class="line">      <span class="attr">ip:</span></span><br><span class="line">      <span class="attr">logpath:</span></span><br><span class="line">      <span class="attr">logretentiondays:</span> <span class="number">30</span></span><br><span class="line">      <span class="attr">port:</span> <span class="number">9999</span></span><br><span class="line">      <span class="comment">#执行器名称</span></span><br><span class="line">      <span class="attr">title:</span> <span class="string">sso-executor</span></span><br></pre></td></tr></table></figure><p>其中包含starter要求的新配置内容：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># admin用户名</span></span><br><span class="line"><span class="attr">username:</span> <span class="string">admin</span></span><br><span class="line"><span class="comment"># admin 密码</span></span><br><span class="line"><span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line"><span class="comment"># 执行器名称</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">sso-executor</span></span><br></pre></td></tr></table></figure><p>完成后在代码中配置一下<code>XxlJobSpringExecutor</code>，然后在测试接口上添加原生<code>@XxlJob</code>注解和我们自定义的<code>@XxlRegister</code>注解：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@XxlJob(&quot;demoJobHandler&quot;)</span></span><br><span class="line"><span class="meta">@XxlRegister(cron = &quot;0 0 0 * * ? *&quot;,author = &quot;fanxin&quot;,jobDesc = &quot;测试job&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">demoJobHandler</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    XxlJobHelper.log(<span class="string">&quot;XXL-JOB, Hello World.&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">        XxlJobHelper.log(<span class="string">&quot;beat at:&quot;</span> + i);</span><br><span class="line">        TimeUnit.SECONDS.sleep(<span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// default success</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>启动项目，可以看到执行器自动注册成功</p><p><img src="https://fx-blog-images.oss-cn-beijing.aliyuncs.com/java/image-20231106155820182.png" alt="image-20231106155820182"></p><p>再打开调度中心的任务管理页面，可以看到同时添加了两个注解的任务也已经自动完成了注册</p><p><img src="https://fx-blog-images.oss-cn-beijing.aliyuncs.com/java/image-20231106155847071.png" alt="image-20231106155847071"></p><p><img src="https://fx-blog-images.oss-cn-beijing.aliyuncs.com/java/image-20231106155903340.png" alt="image-20231106155903340"></p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Springboot </tag>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>内存时序和超频</title>
      <link href="/posts/3086756412.html"/>
      <url>/posts/3086756412.html</url>
      
        <content type="html"><![CDATA[<h1 id="内存时序参数与超频深入解析"><a href="#内存时序参数与超频深入解析" class="headerlink" title="内存时序参数与超频深入解析"></a>内存时序参数与超频深入解析</h1><h2 id="内存时序参数简介"><a href="#内存时序参数简介" class="headerlink" title="内存时序参数简介"></a>内存时序参数简介</h2><p>内存模块具有丰富的时序参数可以配置,主要参数如下:</p><h3 id="CAS-Latency-CL"><a href="#CAS-Latency-CL" class="headerlink" title="CAS Latency(CL)"></a>CAS Latency(CL)</h3><p><code>描述行缓冲存储器(ROW BUFFER)读取列地址的数据延迟时间(CAS COMMAND DELAY)。</code></p><p><code>计数单位是时钟周期。数值越小代表读写速度越快。</code></p><h3 id="tRCD-RAS-to-CAS-Delay"><a href="#tRCD-RAS-to-CAS-Delay" class="headerlink" title="tRCD(RAS to CAS Delay)"></a>tRCD(RAS to CAS Delay)</h3><p><code>RAS(ROW ADDRESS STROBE)指令至CAS(COLUMN ADDRESS STROBE)指令之间的延迟。</code> </p><p><code>从行地址选择到列地址选择的时间间隔。</code></p><h3 id="tRP-RAS-Precharge-Time"><a href="#tRP-RAS-Precharge-Time" class="headerlink" title="tRP(RAS Precharge Time)"></a>tRP(RAS Precharge Time)</h3><p><code>RAS指令至下一个RAS指令之间的延迟时间。</code></p><p><code>释放当前行并选择下一个行地址的时间。</code> </p><h3 id="tRAS-Row-Active-Time"><a href="#tRAS-Row-Active-Time" class="headerlink" title="tRAS(Row Active Time)"></a>tRAS(Row Active Time)</h3><p><code>行有效期,一个行被激活后的保持时间。</code></p><p><code>决定可以对同一行进行多次连续访问。</code></p><h2 id="超频与内存时序调整"><a href="#超频与内存时序调整" class="headerlink" title="超频与内存时序调整"></a>超频与内存时序调整</h2><p>内存模块工作频率由系统总线频率决定,随CPU主频的提高,系统总线频率也会增加:</p><ul><li><p>普通频率内,内存使用默认时序工作稳定。</p></li><li><p>但超频后,系统时钟频率升高,内存可能无法按时完成各操作。</p></li></ul><p>为兼容超频带来的系统时钟变化,我们需要调整内存时序:</p><ul><li><p>降低CL、tRCD、tRP等主要时序参数值,给内存留出更多周期操作。</p></li><li><p>例如,3000MHz内存的16-18-18,超频到4000MHz后调整为14-16-16。</p></li></ul><p>同时,需要适当提升DRAM工作电压VDD&#x2F;VDDQ,加速其响应:</p><ul><li><p>太低电压会因响应慢出现错误;过高电压同样不利。</p></li><li><p>时序调整与电压 设置是互相配合,才能让内存稳定工作在高频下。</p></li></ul><h2 id="其他细节需要注意"><a href="#其他细节需要注意" class="headerlink" title="其他细节需要注意"></a>其他细节需要注意</h2><ul><li><p>时序调太低存在安全隐患,务必检查稳定性。</p></li><li><p>某些芯片组对时序参数有限制,不要调出规格。 </p></li><li><p>更高时钟需要更高等级的内存方可运行无误。</p></li><li><p>调节前最好备份数据,避免因试错导致系统损坏。</p></li><li><p>内存热度也会影响频率极限,需要有效冷却管理。</p></li></ul><p>总之,内存超频需要掌握时序原理,并考虑各种影响因素,方能运行稳定。</p>]]></content>
      
      
      <categories>
          
          <category> 个人空间 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机硬件 </tag>
            
            <tag> 内存 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DOTA2历届TI冠军</title>
      <link href="/posts/3849495592.html"/>
      <url>/posts/3849495592.html</url>
      
        <content type="html"><![CDATA[<h1 id="Dota-2-历届-TI-冠军"><a href="#Dota-2-历届-TI-冠军" class="headerlink" title="Dota 2 历届 TI 冠军"></a>Dota 2 历届 TI 冠军</h1><p>Dota 2 的国际邀请赛（The International, 简称 TI）是全球最重要的 Dota 2 锦标赛，每年吸引着世界各地的顶级战队角逐。在这篇博客中，我们将回顾 Dota 2 历届 TI 的冠军战队和他们的辉煌表现。</p><h2 id="TI1-2011-Na’Vi"><a href="#TI1-2011-Na’Vi" class="headerlink" title="TI1 (2011) - Na’Vi"></a>TI1 (2011) - Na’Vi</h2><p><img src="https://fx-blog-images.oss-cn-beijing.aliyuncs.com/java/image-20231107175814110.png" alt="image-20231107175814110"></p><p>第一届 TI 于 2011 年在德国举行，由来自乌克兰的 Natus Vincere（Na’Vi）战队夺冠。他们在决赛中以 3:1 的比分击败中国战队 EHOME，赢得了总奖金 100 万美元。Na’Vi 以其精湛的团队配合和传奇的玩家 Dendi 的个人表现而闻名。</p><h2 id="TI2-2012-Invictus-Gaming"><a href="#TI2-2012-Invictus-Gaming" class="headerlink" title="TI2 (2012) - Invictus Gaming"></a>TI2 (2012) - Invictus Gaming</h2><p><img src="https://fx-blog-images.oss-cn-beijing.aliyuncs.com/java/image-20231107175740775.png" alt="image-20231107175740775"></p><p>第二届 TI 于 2012 年在美国西雅图举行，由中国战队 Invictus Gaming（iG）夺冠。iG 在决赛中以 3:1 的比分击败 Na’Vi，成为首个获得 TI 冠军的中国战队。他们展现出强大的团队默契和超凡的技术实力。</p><h2 id="TI3-2013-Alliance"><a href="#TI3-2013-Alliance" class="headerlink" title="TI3 (2013) - Alliance"></a>TI3 (2013) - Alliance</h2><p><img src="https://fx-blog-images.oss-cn-beijing.aliyuncs.com/java/image-20231107175705494.png" alt="image-20231107175705494"></p><p>第三届 TI 于 2013 年在美国西雅图举行，由瑞典战队 Alliance 夺冠。在激烈的决赛中，Alliance 以 3:2 的比分击败 Na’Vi，赢得了总奖金超过 250 万美元。Alliance 以其创新的战术和卓越的团队协作能力赢得了众人的赞誉。</p><h2 id="TI4-2014-Newbee"><a href="#TI4-2014-Newbee" class="headerlink" title="TI4 (2014) - Newbee"></a>TI4 (2014) - Newbee</h2><p><img src="https://fx-blog-images.oss-cn-beijing.aliyuncs.com/java/image-20231107175324785.png" alt="image-20231107175324785"></p><p>第四届 TI 于 2014 年在美国西雅图举行，由中国战队 Newbee 夺冠。Newbee 在决赛中以 3:1 的比分击败 Vici Gaming，成为首个获得 TI 冠军的新晋战队。他们展现出出色的战术执行能力和稳定的心态。</p><h2 id="TI5-2015-Evil-Geniuses"><a href="#TI5-2015-Evil-Geniuses" class="headerlink" title="TI5 (2015) - Evil Geniuses"></a>TI5 (2015) - Evil Geniuses</h2><p><img src="https://fx-blog-images.oss-cn-beijing.aliyuncs.com/java/image-20231107175143661.png" alt="image-20231107175143661"></p><p>第五届 TI 于 2015 年在美国西雅图举行，由美国战队 Evil Geniuses（EG）夺冠。在激动人心的决赛中，EG 以 3:1 的比分击败 CDEC Gaming，赢得了超过 600 万美元的总奖金。EG 以其出色的个人技术和稳定的团队表现赢得了冠军。</p><h2 id="TI6-2016-Wings-Gaming"><a href="#TI6-2016-Wings-Gaming" class="headerlink" title="TI6 (2016) - Wings Gaming"></a>TI6 (2016) - Wings Gaming</h2><p><img src="https://fx-blog-images.oss-cn-beijing.aliyuncs.com/java/image-20231107175051374.png" alt="image-20231107175051374"></p><p>第六届 TI 于 2016 年在美国西雅图举行，由中国战队 Wings Gaming 夺冠。Wings Gaming 在决赛中以 3:1 的比分击败 Digital Chaos，赢得了超过 900 万美元的总奖金。他们以其创新的英雄选择和多样化的战术风格令人难以预测。</p><h2 id="TI7-2017-Team-Liquid"><a href="#TI7-2017-Team-Liquid" class="headerlink" title="TI7 (2017) - Team Liquid"></a>TI7 (2017) - Team Liquid</h2><p><img src="https://fx-blog-images.oss-cn-beijing.aliyuncs.com/java/image-20231107174806225.png" alt="image-20231107174806225"></p><p>第七届 TI 于 2017 年在美国西雅图举行，由欧洲战队 Team Liquid 夺冠。在激动人心的决赛中，Team Liquid 以 3:0 的比分击败 Newbee，赢得了超过 1000 万美元的总奖金。Team Liquid 在整个比赛中展现出了出色的团队协作和个人技术。</p><h2 id="TI8-2018-OG"><a href="#TI8-2018-OG" class="headerlink" title="TI8 (2018) - OG"></a>TI8 (2018) - OG</h2><p><img src="https://fx-blog-images.oss-cn-beijing.aliyuncs.com/java/image-20231107174638980.png" alt="image-20231107174638980"></p><p>第八届 TI 于 2018 年在加拿大温哥华举行，由欧洲战队 OG 夺冠。在激烈的决赛中，OG 以 3:2 的比分击败 PSG.LGD，赢得了超过 1100 万美元的总奖金。</p><h2 id="TI9-2019-OG"><a href="#TI9-2019-OG" class="headerlink" title="TI9 (2019) - OG"></a>TI9 (2019) - OG</h2><p><img src="https://fx-blog-images.oss-cn-beijing.aliyuncs.com/java/image-20231107174603317.png" alt="image-20231107174603317"></p><p>第九届 TI 于 2019 年在中国上海举行，同样由欧洲战队 OG 夺冠。在令人难以置信的决赛中，OG 以 3:2 的比分击败 Team Liquid，成功卫冕冠军。他们不仅成为首个连续两届获得 TI 冠军的战队，还以其强大的心态、创新的战术和超凡的个人技术赢得了人们的尊重和赞赏。</p><h2 id="TI10-2021-Team-Spirit"><a href="#TI10-2021-Team-Spirit" class="headerlink" title="TI10 (2021) - Team Spirit"></a>TI10 (2021) - Team Spirit</h2><p><img src="https://fx-blog-images.oss-cn-beijing.aliyuncs.com/java/image-20231107174533115.png" alt="image-20231107174533115"></p><p>第十届TI于2021年在瑞典首都斯德哥尔摩举行，由东欧霸主TS夺冠。在与PSG.LGD的决赛中双方打满五局，最终艰难夺冠。崩溃哥一手绝活猛犸成为了中国DOTA玩家梦魇，这次决赛上成就了很多名梗，波高水人、为什么不ban猛犸。</p><h2 id="TI11-2022-Tundra-Esports"><a href="#TI11-2022-Tundra-Esports" class="headerlink" title="TI11(2022) - Tundra Esports"></a>TI11(2022) - Tundra Esports</h2><p><img src="https://fx-blog-images.oss-cn-beijing.aliyuncs.com/java/image-20231107174433177.png" alt="image-20231107174433177"></p><p>第十一届TI于2022年在新加坡举行，我们再度见证了新王的诞生，Tundra成为TI历史上第10支夺冠队伍。在首先进行的败者组决赛中，Secret 2:1战胜Liquid，晋级总决赛。随后在总决赛中，Tundra以3:0的比分战胜了Secret，夺得了2022年国际邀请赛的冠军。</p><h2 id="TI12-2023-Team-Spirit"><a href="#TI12-2023-Team-Spirit" class="headerlink" title="TI12(2023) - Team Spirit"></a>TI12(2023) - Team Spirit</h2><p><img src="https://fx-blog-images.oss-cn-beijing.aliyuncs.com/java/image-20231107174409473.png" alt="image-20231107174409473"></p><p>第十二届TI于2023年重回西雅图，Team Spirit在3-0战胜GG战队后，荣膺本届TI12总冠军。这一成绩使他们与OG并肩成为历史上第二个双冠王。Yatoro雨问鼎世一C。</p>]]></content>
      
      
      <categories>
          
          <category> 游戏 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DOTA2 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>浅析Spring框架</title>
      <link href="/posts/2093696935.html"/>
      <url>/posts/2093696935.html</url>
      
        <content type="html"><![CDATA[<h1 id="浅析Spring框架"><a href="#浅析Spring框架" class="headerlink" title="浅析Spring框架"></a>浅析Spring框架</h1><p>Spring是一个开源的轻量级Java框架，用于构建企业级应用程序。它提供了丰富的功能和模块，使得Java开发变得更加简单和高效。本文将深入探讨Spring框架的核心概念、关键模块和常用功能。</p><p><img src="https://fx-blog-images.oss-cn-beijing.aliyuncs.com/java/image-20231107164010023.png" alt="image-20231107164010023"></p><h2 id="核心概念"><a href="#核心概念" class="headerlink" title="核心概念"></a>核心概念</h2><p>Spring框架的核心概念包括控制反转（IoC）、依赖注入（DI）和面向切面编程（AOP）。</p><h3 id="控制反转（IoC）"><a href="#控制反转（IoC）" class="headerlink" title="控制反转（IoC）"></a>控制反转（IoC）</h3><p>控制反转是Spring框架的基石。它通过将对象的创建和管理交给框架来实现松耦合和可测试性。在传统的开发模式中，对象的创建和依赖关系管理由开发人员手动完成，而在Spring中，我们将这些任务交给了IoC容器来处理。通过IoC容器，我们可以定义和组装应用程序中的对象及其依赖关系。</p><h3 id="依赖注入（DI）"><a href="#依赖注入（DI）" class="headerlink" title="依赖注入（DI）"></a>依赖注入（DI）</h3><p>依赖注入是IoC的一种实现方式。它通过将对象的依赖关系注入到对象中，实现了对象间的解耦。在Spring中，我们可以使用构造函数注入、Setter方法注入或注解来实现依赖注入。依赖注入使得对象的创建和使用变得更加灵活和可扩展。</p><h3 id="面向切面编程（AOP）"><a href="#面向切面编程（AOP）" class="headerlink" title="面向切面编程（AOP）"></a>面向切面编程（AOP）</h3><p>面向切面编程是Spring框架的另一个重要特性。它允许我们在不修改源代码的情况下，通过切面来实现横切关注点的复用和集中管理。在传统的开发模式中，横切关注点（如日志记录、事务管理等）会散布在应用程序的各个部分，导致代码的重复和难以维护。而通过AOP，我们可以将这些关注点抽象出来，并通过切面的方式来统一管理。</p><h2 id="核心模块"><a href="#核心模块" class="headerlink" title="核心模块"></a>核心模块</h2><p>Spring框架由多个模块组成，每个模块都提供不同的功能和特性。以下是一些常用的核心模块。</p><h3 id="Spring-Core"><a href="#Spring-Core" class="headerlink" title="Spring Core"></a>Spring Core</h3><p>Spring Core模块是Spring框架的核心模块，提供了IoC容器、依赖注入和事件驱动编程等核心功能。它包含了核心的BeanFactory接口，负责管理应用程序中的对象。Spring Core还提供了许多辅助类和工具，用于简化开发过程。</p><h3 id="Spring-MVC"><a href="#Spring-MVC" class="headerlink" title="Spring MVC"></a>Spring MVC</h3><p>Spring MVC模块是用于构建Web应用程序的模块，提供了MVC（模型-视图-控制器）的架构和处理器映射等功能。它可以与其他Spring模块（如Spring Core和Spring Data）集成，提供完整的Web开发解决方案。</p><h3 id="Spring-Data"><a href="#Spring-Data" class="headerlink" title="Spring Data"></a>Spring Data</h3><p>Spring Data模块简化了与各种数据访问技术（如关系型数据库、NoSQL数据库、缓存等）的集成。它提供了一组统一的API和抽象，使得数据访问变得更加简单和高效。通过Spring Data，我们可以使用简洁的代码访问和操作各种数据源。</p><h3 id="Spring-Security"><a href="#Spring-Security" class="headerlink" title="Spring Security"></a>Spring Security</h3><p>Spring Security模块处理应用程序的安全性和身份验证。它提供了一系列身份验证和授权的功能，包括基于角色的访问控制、表单认证、LDAP集成等。Spring Security可以轻松地集成到Spring应用程序中，提供强大的安全保护。</p><h2 id="常用功能"><a href="#常用功能" class="headerlink" title="常用功能"></a>常用功能</h2><p>除了核心概念和模块外，Spring框架还提供了许多常用的功能，以提升开发效率和代码质量。</p><h3 id="事务管理"><a href="#事务管理" class="headerlink" title="事务管理"></a>事务管理</h3><p>Spring框架提供了强大的事务管理功能，支持声明式和编程式事务管理。通过使用Spring的事务管理，我们可以轻松地管理数据库事务，确保数据的一致性和完整性。</p><h3 id="缓存支持"><a href="#缓存支持" class="headerlink" title="缓存支持"></a>缓存支持</h3><p>Spring框架提供了缓存支持，可以集成多种缓存技术（如Ehcache、Redis等），提高系统的性能和响应速度。通过使用Spring的缓存支持，我们可以通过简单的注解来实现方法级别的缓存。</p><h3 id="异步处理"><a href="#异步处理" class="headerlink" title="异步处理"></a>异步处理</h3><p>Spring框架支持异步处理，可以处理大量并发请求，提高系统的吞吐量和响应能力。通过使用Spring的异步支持，我们可以将耗时的操作委托给其他线程来处理，从而释放当前线程的资源。</p><h3 id="集成测试"><a href="#集成测试" class="headerlink" title="集成测试"></a>集成测试</h3><p>Spring框架提供了一系列的测试支持，使得集成测试变得更加简单和可靠。通过使用Spring的测试支持，我们可以编写单元测试和集成测试，确保应用程序的质量和稳定性。</p><h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>Spring框架作为一个成熟而强大的Java框架，为企业级应用程序的开发提供了丰富的功能和模块。它的核心概念、关键模块和常用功能使得Java开发变得更加简单、高效和可维护。通过深入了解和灵活运用Spring框架，我们可以构建出健壮、可扩展的企业级应用程序。</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL B+树</title>
      <link href="/posts/4214443961.html"/>
      <url>/posts/4214443961.html</url>
      
        <content type="html"><![CDATA[<h1 id="MySQL-B-树浅谈："><a href="#MySQL-B-树浅谈：" class="headerlink" title="MySQL B+ 树浅谈："></a>MySQL B+ 树浅谈：</h1><p>在数据库管理系统中，索引是提高查询性能和管理大型数据库的关键因素之一。而 MySQL B+ 树索引是一种常用的索引结构，它被广泛应用于数据库系统中。在本篇博客中，我们将深入探讨 MySQL B+ 树的原理、特点以及如何使用它来优化数据库查询。</p><p><img src="https://fx-blog-images.oss-cn-beijing.aliyuncs.com/java/image-20231107181750291.png" alt="image-20231107181750291"></p><h2 id="什么是-B-树？"><a href="#什么是-B-树？" class="headerlink" title="什么是 B+ 树？"></a>什么是 B+ 树？</h2><p>B+ 树是一种平衡的树形数据结构，它具有以下特点：</p><ol><li><p><strong>有序性</strong>：B+ 树中的数据是按照特定的排序规则进行组织的，使得数据有序存储。这种有序性可以加速范围查询操作。</p></li><li><p><strong>平衡性</strong>：B+ 树具有平衡性，即所有叶子节点位于相同的深度，这样可以保持查询的稳定性和高效性。</p></li><li><p><strong>多路性</strong>：B+ 树的每个内部节点可以拥有多个子节点，这样可以减少树的高度，减少磁盘 I&#x2F;O 操作。</p></li><li><p><strong>顺序访问性</strong>：B+ 树的叶子节点之间通过指针连接，支持顺序访问。这对于范围查询和排序操作非常有用。</p></li></ol><h2 id="B-树在-MySQL-中的应用"><a href="#B-树在-MySQL-中的应用" class="headerlink" title="B+ 树在 MySQL 中的应用"></a>B+ 树在 MySQL 中的应用</h2><p>MySQL 使用 B+ 树索引来优化数据的存储和查询。以下是 B+ 树在 MySQL 中的应用场景：</p><ol><li><p><strong>主键索引</strong>：在 MySQL 中，主键索引是使用 B+ 树实现的。它可以唯一标识表中的每一行，并且支持快速的数据检索。</p></li><li><p><strong>唯一索引</strong>：唯一索引也是使用 B+ 树实现的。它能够确保索引列中的值是唯一的，避免数据冲突。</p></li><li><p><strong>普通索引</strong>：MySQL 中的普通索引也使用 B+ 树结构。它可以加速对非主键列的查询操作。</p></li><li><p><strong>聚簇索引</strong>：聚簇索引是一种特殊的索引类型，它将数据行存储在索引中，使得查询操作更加高效。在 InnoDB 存储引擎中，聚簇索引是基于 B+ 树实现的。</p></li></ol><h2 id="如何优化-B-树索引的使用？"><a href="#如何优化-B-树索引的使用？" class="headerlink" title="如何优化 B+ 树索引的使用？"></a>如何优化 B+ 树索引的使用？</h2><p>虽然 B+ 树索引可以提高查询性能，但是过多或不正确使用索引可能会导致性能下降。以下是一些优化 B+ 树索引使用的最佳实践：</p><ol><li><p><strong>选择合适的索引列</strong>：选择经常用于查询和过滤的列作为索引列。避免对稀疏或很少使用的列创建索引，因为它们会增加维护成本。</p></li><li><p><strong>避免过多的索引</strong>：避免在相同的列上创建多个索引，因为这会增加存储空间和维护开销。只创建必要的索引。</p></li><li><p><strong>定期分析和优化索引</strong>：定期分析数据库中的索引，检查它们的使用情况和效率。根据需要进行索引优化，比如重新组织索引、删除不必要的索引等。</p></li><li><p><strong>注意索引的选择性</strong>：选择性是指索引列中不同值的数量与总行数的比例。选择性越高，索引的效果越好。因此，选择具有高选择性的列作为索引列。</p></li></ol><p>MySQL B+ 树索引是优化数据库性能和查询效率的重要工具。它具有有序性、平衡性、多路性和顺序访问性等特点，适用于各种类型的索引需求。合理地使用 B+ 树索引可以加快数据的检索速度，并提高数据库的整体性能。</p><p>参考资料：</p><ul><li><a href="https://dev.mysql.com/doc/">MySQL 官方文档</a></li><li><a href="https://www.mysqltutorial.org/mysql-index-optimization/">MySQL 索引优化策略</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux常用操作及示例</title>
      <link href="/posts/201088553.html"/>
      <url>/posts/201088553.html</url>
      
        <content type="html"><![CDATA[<h1 id="Linux常用操作及示例"><a href="#Linux常用操作及示例" class="headerlink" title="Linux常用操作及示例"></a>Linux常用操作及示例</h1><p>记录一些常用的linux操作以备学习</p><p><img src="https://fx-blog-images.oss-cn-beijing.aliyuncs.com/java/image-20231107165513533.png" alt="image-20231107165513533"></p><h2 id="终端操作"><a href="#终端操作" class="headerlink" title="终端操作"></a>终端操作</h2><h3 id="文件和目录管理"><a href="#文件和目录管理" class="headerlink" title="文件和目录管理"></a>文件和目录管理</h3><ul><li><p><code>ls</code>：列出当前目录下的文件和文件夹。<br>示例：<code>ls -l</code>命令用于以详细列表形式显示文件和目录。</p></li><li><p><code>cd</code>：切换到指定目录。<br>示例：<code>cd /home</code>命令用于切换到&#x2F;home目录。</p></li><li><p><code>pwd</code>：显示当前所在目录的路径。<br>示例：<code>pwd</code>命令用于显示当前所在的目录路径。</p></li><li><p><code>mkdir</code>：创建新目录。<br>示例：<code>mkdir myfolder</code>命令用于在当前目录下创建名为myfolder的新目录。</p></li><li><p><code>rm</code>：删除文件或目录。<br>示例：<code>rm myfile.txt</code>命令用于删除名为myfile.txt的文件。</p></li><li><p><code>cp</code>：复制文件或目录。<br>示例：<code>cp myfile.txt myfolder/</code>命令用于将myfile.txt文件复制到myfolder目录。</p></li><li><p><code>mv</code>：移动文件或目录。<br>示例：<code>mv myfile.txt myfolder/</code>命令用于将myfile.txt文件移动到myfolder目录。</p></li></ul><h3 id="文件查看和编辑"><a href="#文件查看和编辑" class="headerlink" title="文件查看和编辑"></a>文件查看和编辑</h3><ul><li><p><code>cat</code>：显示文件内容。<br>示例：<code>cat myfile.txt</code>命令用于显示myfile.txt文件的内容。</p></li><li><p><code>less</code>：分页显示文件内容。<br>示例：<code>less myfile.txt</code>命令用于以分页方式显示myfile.txt文件的内容。</p></li><li><p><code>head</code>：显示文件的前几行。<br>示例：<code>head -n 5 myfile.txt</code>命令用于显示myfile.txt文件的前5行。</p></li><li><p><code>tail</code>：显示文件的后几行。<br>示例：<code>tail -n 10 myfile.txt</code>命令用于显示myfile.txt文件的最后10行。</p></li><li><p><code>nano</code>：使用Nano编辑器编辑文件。<br>示例：<code>nano myfile.txt</code>命令用于使用Nano编辑器打开myfile.txt文件进行编辑。</p></li><li><p><code>vi</code>或<code>vim</code>：使用Vim编辑器编辑文件。<br>示例：<code>vi myfile.txt</code>命令用于使用Vim编辑器打开myfile.txt文件进行编辑。</p></li></ul><h3 id="系统信息查看"><a href="#系统信息查看" class="headerlink" title="系统信息查看"></a>系统信息查看</h3><ul><li><p><code>uname</code>：显示系统信息。<br>示例：<code>uname -a</code>命令用于显示完整的系统信息。</p></li><li><p><code>whoami</code>：显示当前登录用户。<br>示例：<code>whoami</code>命令用于显示当前登录用户的用户名。</p></li><li><p><code>top</code>：显示系统当前运行的进程和资源占用情况。<br>示例：<code>top</code>命令用于实时显示系统的运行情况。</p></li><li><p><code>free</code>：显示系统内存使用情况。<br>示例：<code>free -h</code>命令用于以人类可读的方式显示系统的内存使用情况。</p></li><li><p><code>df</code>：显示磁盘空间使用情况。<br>示例：<code>df -h</code>命令用于以人类可读的方式显示磁盘空间的使用情况。</p></li></ul><h2 id="包管理器"><a href="#包管理器" class="headerlink" title="包管理器"></a>包管理器</h2><h3 id="APT"><a href="#APT" class="headerlink" title="APT"></a>APT</h3><ul><li><p><code>apt update</code>：更新软件包列表。<br>示例：<code>apt update</code>命令用于更新可用软件包的列表。</p></li><li><p><code>apt upgrade</code>：升级已安装的软件包。<br>示例：<code>apt upgrade</code>命令用于升级所有已安装的软件包。</p></li><li><p><code>apt install</code>：安装指定的软件包。<br>示例：<code>apt install nginx</code>命令用于安装Nginx Web服务器。</p></li><li><p><code>apt remove</code>：卸载指定的软件包。<br>示例：<code>apt remove nginx</code>命令用于卸载Nginx Web服务器。</p></li><li><p><code>apt search</code>：搜索可用的软件包。<br>示例：<code>apt search python</code>命令用于搜索与关键词”python”相关的可用软件包。</p></li></ul><h3 id="YUM"><a href="#YUM" class="headerlink" title="YUM"></a>YUM</h3><ul><li><p><code>yum update</code>：更新软件包。<br>示例：<code>yum update</code>命令用于更新所有可用的软件包。</p></li><li><p><code>yum upgrade</code>：升级已安装的软件包。<br>示例：<code>yum upgrade</code>命令用于升级所有已安装的软件包。</p></li><li><p><code>yum install</code>：安装指定的软件包。<br>示例：<code>yum install httpd</code>命令用于安装Apache HTTP服务器。</p></li><li><p><code>yum remove</code>：卸载指定的软件包。<br>示例：<code>yum remove httpd</code>命令用于卸载Apache HTTP服务器。</p></li><li><p><code>yum search</code>：搜索可用的软件包。<br>示例：<code>yum search mysql</code>命令用于搜索与关键词”mysql”相关的可用软件包。</p></li></ul><h2 id="用户和权限管理"><a href="#用户和权限管理" class="headerlink" title="用户和权限管理"></a>用户和权限管理</h2><ul><li><p><code>useradd</code>：创建新用户。<br>示例：<code>useradd john</code>命令用于创建名为”john”的新用户。</p></li><li><p><code>passwd</code>：修改用户密码。<br>示例：<code>passwd john</code>命令用于修改用户”john”的密码。</p></li><li><p><code>usermod</code>：修改用户属性。<br>示例：<code>usermod -aG sudo john</code>命令用于将用户”john”添加到sudo用户组。</p></li><li><p><code>userdel</code>：删除用户。<br>示例：<code>userdel john</code>命令用于删除用户”john”。</p></li><li><p><code>sudo</code>：以超级用户权限执行命令。<br>示例：<code>sudo apt update</code>命令用于以超级用户权限更新软件包列表。</p></li><li><p><code>chmod</code>：修改文件或目录的权限。<br>示例：<code>chmod 644 myfile.txt</code>命令用于将myfile.txt文件的权限设置为644。</p></li><li><p><code>chown</code>：修改文件或目录的所有者。<br>示例：<code>chown john myfile.txt</code>命令用于将myfile.txt文件的所有者设置为用户”john”。</p></li><li><p><code>chgrp</code>：修改文件或目录的所属组。<br>示例：<code>chgrp staff myfile.txt</code>命令用于将myfile.txt文件的所属组设置为”staff”。</p></li></ul><h2 id="网络管理"><a href="#网络管理" class="headerlink" title="网络管理"></a>网络管理</h2><ul><li><p><code>ifconfig</code>：显示和配置网络接口。<br>示例：<code>ifconfig eth0</code>命令用于显示名为”eth0”的网络接口信息。</p></li><li><p><code>ping</code>：测试与另一个主机的连接。<br>示例：<code>ping google.com</code>命令用于测试与google.com主机的连接。</p></li><li><p><code>ssh</code>：通过SSH协议远程登录到另一个主机。<br>示例：<code>ssh user@example.com</code>命令用于通过SSH协议远程登录到example.com主机。</p></li><li><p><code>scp</code>：通过SSH协议在本地主机和远程主机之间复制文件。<br>示例：<code>scp myfile.txt user@example.com:/home/user/</code>命令用于将myfile.txt文件复制到example.com主机的&#x2F;home&#x2F;user&#x2F;目录。</p></li><li><p><code>wget</code>：从网络上下载文件。<br>示例：<code>wget https://example.com/file.zip</code>命令用于从example.com下载file.zip文件。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> 操作系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DOTA2</title>
      <link href="/posts/3794200663.html"/>
      <url>/posts/3794200663.html</url>
      
        <content type="html"><![CDATA[<h1 id="DOTA-2"><a href="#DOTA-2" class="headerlink" title="DOTA 2"></a>DOTA 2</h1><p>DOTA 2是一款备受瞩目的多人在线战斗竞技游戏。它以其复杂的游戏机制、多样化的英雄角色和激烈的团队对抗而闻名于世。本文将深入探索DOTA 2的核心要素、游戏玩法和竞技场景。</p><h2 id="游戏背景"><a href="#游戏背景" class="headerlink" title="游戏背景"></a>游戏背景</h2><p>DOTA 2是基于自定义游戏模式“Defense of the Ancients”（DotA）而创建的。该游戏模式最初是由一位玩家开发的，后来Valve Corporation将其纳入旗下，并推出了DOTA 2。DOTA 2延续了DotA的核心理念，提供了更多英雄角色、更精细的游戏平衡和更出色的游戏体验。</p><h2 id="核心要素"><a href="#核心要素" class="headerlink" title="核心要素"></a>核心要素</h2><h3 id="英雄角色"><a href="#英雄角色" class="headerlink" title="英雄角色"></a>英雄角色</h3><p>DOTA 2拥有大量多样化的英雄角色供玩家选择。每个英雄都有独特的技能和属性，玩家需要根据自己的游戏风格和团队需要来选择合适的英雄。英雄之间的组合和配合是游戏中的关键，团队作战和策略规划至关重要。</p><p><img src="https://fx-blog-images.oss-cn-beijing.aliyuncs.com/java/image-20231107162536928.png"></p><h3 id="游戏地图"><a href="#游戏地图" class="headerlink" title="游戏地图"></a>游戏地图</h3><p>DOTA 2的游戏地图被称为“地图之王”。它是一个对称的三条主要路径（称为“线路”）和丛林的复杂网络。每条线路都由一座友方防御塔和一座敌方防御塔保护着。玩家需要在各条线路上推进，并摧毁敌方的防御塔和主基地。</p><h3 id="金钱和经验"><a href="#金钱和经验" class="headerlink" title="金钱和经验"></a>金钱和经验</h3><p>在游戏中，玩家通过击杀敌方单位获得金钱和经验。金钱可以用来购买装备和道具，提升英雄的能力。经验则用于提升英雄的等级，获得新的技能和属性加成。有效地管理金钱和经验是取得游戏胜利的关键。</p><h3 id="团队合作"><a href="#团队合作" class="headerlink" title="团队合作"></a>团队合作</h3><p>DOTA 2是一款团队合作的游戏，团队的配合和沟通对游戏的结果至关重要。玩家需要与队友密切合作，制定战略、共同进攻和防守。团队中的每个成员都扮演着重要的角色，需要相互支持和协作才能取得胜利。</p><p><img src="https://fx-blog-images.oss-cn-beijing.aliyuncs.com/java/image-20231107162635210.png" alt="image-20231107162635210"></p><h2 id="游戏玩法"><a href="#游戏玩法" class="headerlink" title="游戏玩法"></a>游戏玩法</h2><h3 id="对战模式"><a href="#对战模式" class="headerlink" title="对战模式"></a>对战模式</h3><p>DOTA 2提供了多种对战模式，包括传统的5v5对战、单人对战和排位赛等。在5v5对战中，两支由玩家组成的团队将在地图上展开激烈的对抗。单人对战则是一种挑战自我的方式，玩家将与其他玩家匹配，争夺胜利。</p><h3 id="赛事和竞技场景"><a href="#赛事和竞技场景" class="headerlink" title="赛事和竞技场景"></a>赛事和竞技场景</h3><p>DOTA 2的竞技场景非常活跃，每年都会举办大型的DOTA 2锦标赛，吸引全球顶级的职业选手和数以百万计的观众。其中最具盛名的赛事是国际邀请赛（The International），这是一个由Valve主办的全球顶级DOTA 2赛事，奖金高达数百万美元。</p><h3 id="社区和创意工坊"><a href="#社区和创意工坊" class="headerlink" title="社区和创意工坊"></a>社区和创意工坊</h3><p>DOTA 2拥有一个庞大而活跃的社区，玩家们可以在社区中交流、分享游戏经验和策略。此外，DOTA 2还有一个创意工坊，允许玩家创建自定义地图、英雄和游戏模式，为游戏增添了无尽的可能性。</p><p><img src="https://fx-blog-images.oss-cn-beijing.aliyuncs.com/java/image-20231107162706110.png" alt="image-20231107162706110"></p><h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>DOTA 2是一款令人着迷的多人在线战斗竞技游戏，其丰富的游戏机制和激烈的团队对抗吸引了大量的玩家和观众。在DOTA 2中，玩家可以选择各种多样化的英雄角色，与队友合作，制定战略并在战场上取得胜利。游戏的竞技场景非常丰富，每年都有大型的DOTA 2赛事吸引着全球的关注。DOTA 2的魅力不仅在于其深度和复杂性，还在于其活跃的社区和创意工坊，玩家们可以共同探索和创造属于自己的DOTA 2世界。</p>]]></content>
      
      
      <categories>
          
          <category> 游戏 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DOTA2 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
