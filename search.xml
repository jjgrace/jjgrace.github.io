<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>正则</title>
      <link href="/posts/1930862360.html"/>
      <url>/posts/1930862360.html</url>
      
        <content type="html"><![CDATA[<p>###正则</p><p>@(js入门2)</p><p>[toc]</p><hr><p>#####1.什么是正则</p><blockquote><p>用来处理’字符串’的规则<br>1.验证当前的这个字符串是否符合这个规则-&gt;正则匹配<br>2.把一个字符串中符合规则的字符串捕获到-&gt;正则捕获</p></blockquote><p>#####2.正则的方法</p><blockquote><p>正则匹配：[正则].test([字符串])<br>正则捕获：[正则].exec([字符串])或者[字符串].match([正则])或者[字符串].replach([正则]),function….)或者[字符串].split([正则])….</p></blockquote><p>#####3.元字符和修饰符</p><blockquote><p>一个正则就是由元字符和修饰符组成的，想要学会编写自己所需的规则，需要牢牢掌握元字符和修饰符</p></blockquote><p>#####4.修饰符</p><blockquote><p>i(ignoreCase):忽略单词大小写<br>m(multiline):多行匹配<br>g(global):全局匹配</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">修饰符放在最后一个斜杠的后面</span><br><span class="line">var reg=/^\d\d\d$/img;</span><br><span class="line">实例创建方式中，修饰符放在第二个实参字符串中</span><br><span class="line">var reg=new RegExp(&#x27;&#x27;,&#x27;img&#x27;)</span><br></pre></td></tr></table></figure><p>#####5元字符<br>#####5.1特殊元字符</p><blockquote><p>有特殊含义的<br>\：转义字符:把普通元字符转换为特殊的意义或者把特殊元字符转换为普通的意义。例如:&#x2F;\d&#x2F;d本身是一个字符，前面加一个转移字符，代表0-9之间的数字。.在正则中代表任意字符(特殊含义),此处加上转义字符,代表就是本身意思了。<br>^：一某个元字符开始.例如&#x2F;^1&#x2F;代表当前字符串应该是以1开始的。<br>$：以某一个元字符结束<code>/2$/</code>代表当前字符串应该是以2结尾的<br>\d：代表一个0-9之间的数字<br>\D：和\d正好相反，除了一个非0-9之间任意字符(大写字母和小写字母的是相反的)<br>\w：数字、字母、下划线三者中的任意一个<br>\W：和\w相反<br>\n：匹配一个换行符<br>\b：匹配一个边界<br>\s：匹配一个空白符<br>.：除了\n以外的任意字符<br>x|y：x或者y中的一个y<br>()：分组.<br>[a-z]:匹配一个a-z的任意字符&#x2F;[0-9]&#x2F;  0-9之间的任何一个数字，等价于\d<br>[^a-z]：除了a-z以外的任意一个字符，这个的^是取反的意思<br>[xyz]：x或者y或者z，三者中的一个<br>?&#x3D;：正向预查<br>?!：负向预查<br>?:：只匹配不捕获</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//两个斜杠中间包起来的都是正则的元字符</span><br><span class="line"></span><br><span class="line">var reg=/^\d+$/</span><br><span class="line">var reg=new RegExp(&#x27;[元字符]&#x27;,&#x27;[修饰符]&#x27;)</span><br></pre></td></tr></table></figure><p>#####5.2量词元字符</p><blockquote><p>代表出现多次<br>*前面的元字符出现零次到多次<br>+前面的元字符出现一次到多次<br>?：前面的元字符出现零次或者一次<br>{n}：出现n次<br>{n,}：出现n到多次<br>{n,m}：出现n到m次</p></blockquote><p>#####5.3普通元字符</p><blockquote><p>代表本身含义的</p></blockquote><p>例子</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>验证手机号的简单正</span><br><span class="line"><span class="keyword">var</span> reg=<span class="regexp">/^1\d&#123;10&#125;$/</span>-&gt;同时加了^和$，此正则可以了解为某某某规则：如果两个都不加，只要字符串中有一部分符合这个这个规则</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>#####6.中括号的细节问题：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">中括号里面出现的多为数，不是多位数，而是数字中出现的任意一个</span><br><span class="line"><span class="keyword">var</span> reg=<span class="regexp">/^[18]$/</span>   <span class="comment">//1或者8中的一个数字</span></span><br><span class="line"><span class="keyword">var</span> reg=<span class="regexp">/^[16-85]/</span> <span class="comment">//1或者6-8或者5,三者中的一个数字</span></span><br><span class="line"><span class="keyword">var</span> reg=<span class="regexp">/^[\da-ZA-Z_]/</span>  等同于大W</span><br><span class="line"><span class="comment">//中括号中出现的元字符一般都是本身的意思，很多元字符也都变为本身的意思了</span></span><br><span class="line"><span class="keyword">var</span> reg=<span class="regexp">/^+-./</span>d$/  <span class="comment">//除了\d突然被代表的0-9中的一个数字，其余的都是代表本身的意思</span></span><br></pre></td></tr></table></figure><p>#####7.小括号的一些作用和细节</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> reg=<span class="regexp">/^18|19$/</span>  <span class="comment">//按照我们的本身的理解，应该是18或19,的两个任意一个，符合x|y这个元字符的规则。</span></span><br><span class="line"><span class="string">`但是`</span>现实不是这样的，上面的规则，<span class="number">18</span>，<span class="number">19</span>，<span class="number">181</span>，<span class="number">189</span>，<span class="number">819</span>都符合，他识别和处理的规则特别乱</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> reg=<span class="regexp">/^(18|19)$/</span>当我们使用分组把它包起来的时候就好了，现在就只能匹配<span class="number">18</span>或者<span class="number">19</span>了，其余的都不可以</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>正则中的小括号的第一个作用：改变默认的优先级</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">2.18到65之间的数</span><br><span class="line">验证年龄：18~65</span><br><span class="line">18或者19</span><br><span class="line">20~59</span><br><span class="line">60~65</span><br><span class="line">var reg=/^((18|19)|([2-5]\d)|(6[0-5]))$/;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">3.验证中文姓名的</span><br><span class="line">只能是中文汉字 第一个汉字的ASCII:\u4E00</span><br><span class="line">最后一个汉字的ASCII码：\u9FA5</span><br><span class="line">正常是2-4</span><br><span class="line">var reg=/^[\u4E00-\u9FA5]$&#123;2,4&#125;/</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">4.验证是不是有效数字</span><br><span class="line">可能出现-，也可能不出现</span><br><span class="line">一位数可以是零，多位数零不能作为开头</span><br><span class="line">小数部分可能有可能没有，如果一旦有，小数点后i按必须有数字</span><br><span class="line">var reg=/^-?(\d|([1-9]\d+))(\.\d+)?$/;</span><br><span class="line"></span><br><span class="line">5.验证身份证号码的</span><br><span class="line">前17位是数字,最后以为数字或者X</span><br><span class="line">完善：我们需要在身份证中获取到 省市县、出生年月日、性别、等信息</span><br><span class="line">var reg=/^\d&#123;17&#125;(\d|X)$/;</span><br></pre></td></tr></table></figure><p>正则中小括号的第二个应用：分组引用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">\1或者\2或者\数字</span><br><span class="line">//代表个对应分组出现一模一样的内容，也就是\1代表和第一个分组出现的内容一模一样比如oppo moom</span><br><span class="line">var reg=/^([a-z][a-z])\2\1$/;</span><br><span class="line">var reg=/^((\d&#123;6&#125;)(\d&#123;4&#125;)(\d&#123;2&#125;)(\d&#123;2&#125;)\d&#123;2&#125;(?:\d|X))$/</span><br><span class="line">把需要单独获取的部分用分组包起来，正则捕获的时候可以复活到分组中的内容，如果加了分组，但是不想捕获，在该分组前面加？：即可(只匹配不捕获)</span><br></pre></td></tr></table></figure><p>#####8.正则的捕获</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> reg=<span class="regexp">/\d+/</span>-&gt;包含<span class="number">1</span>到多个数字</span><br><span class="line"><span class="keyword">var</span> str=<span class="string">&#x27;zhufeng2017peixun2018&#x27;</span></span><br><span class="line">reg.<span class="title function_">exec</span>(str)</span><br><span class="line"><span class="number">1</span>)reg.<span class="title function_">exec</span>(str)<span class="comment">//在执行一次捕获的还是2017，当前正则执行一次只能捕获到一个匹配的内容，我执行两次捕获的依然还是第一次捕获的内容，这一点说明了一个问题，正则的捕获的懒惰性。</span></span><br><span class="line"><span class="attr">lastIndex</span>:下一次正则捕获的时候，在字符串中查找的开始位置索引</span><br><span class="line">第一次查找之前，reg.<span class="property">lastIndex</span>=<span class="number">0</span>,也就是第一次是从字符串开始的位置查找的，所以第一次执行exec结束后。reg.<span class="property">lastIndex</span>值还是<span class="number">0.</span>所以第二次依然是从字母的开始位置找的，找到的当让<span class="number">2017</span>。例如<span class="keyword">var</span> reg=<span class="regexp">/\d+/g</span>;</span><br><span class="line">reg.<span class="property">lastIdex</span>-&gt;<span class="number">0</span></span><br><span class="line">reg.<span class="title function_">exec</span>(str);-&gt;[<span class="string">&#x27;2017&#x27;</span>...]</span><br><span class="line"></span><br><span class="line">reg.<span class="property">lastIdex</span>-&gt;<span class="number">11</span></span><br><span class="line">reg.<span class="title function_">exec</span>(str);-&gt;[<span class="string">&#x27;2018&#x27;</span>...]</span><br><span class="line"></span><br><span class="line">reg.<span class="property">lastIdex</span>-&gt;<span class="number">21</span></span><br><span class="line">reg.<span class="title function_">exec</span>(str);-&gt;<span class="literal">null</span>捕获不到</span><br><span class="line"></span><br><span class="line">reg.<span class="property">lastIdex</span>-&gt;<span class="number">0</span></span><br><span class="line">reg.<span class="title function_">exec</span>(str);-&gt;[<span class="string">&#x27;2017&#x27;</span>...]</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">*上面的案例中，我们知道执行两次可以捕获全了，但是如果你不知道具体要捕获多少次,我们该*如何是好？</span></span><br><span class="line"><span class="comment">*接下来我们自己在RegExp的原型上扩展一个方法myExecAll,执行这个方法,可以把所有匹配的一次性都捕获到</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">//str需要捕获的原有字符串</span></span><br><span class="line"><span class="title class_">RegExp</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">myExecAll</span>=<span class="keyword">function</span> <span class="title function_">myExecAll</span>(<span class="params"></span>)&#123;</span><br><span class="line">functiong <span class="title function_">myExecAll</span>(<span class="params">str</span>)&#123;</span><br><span class="line"><span class="comment">//this reg</span></span><br><span class="line"><span class="comment">//为了防止不加g的时候，每一次都是第一个，导致死循环，我们在正则没有加g的时候执行一次即可,如果global===false就没有加g</span></span><br><span class="line"><span class="keyword">if</span>(!<span class="variable language_">this</span>.<span class="property">global</span>)&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">exec</span>(str);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//已经加g了</span></span><br><span class="line"><span class="keyword">var</span> ary=[];存储所有捕获的结果</span><br><span class="line"><span class="keyword">var</span> res=<span class="variable language_">this</span>.<span class="title function_">exec</span>(str);</span><br><span class="line"><span class="keyword">while</span>(res)&#123;</span><br><span class="line">ary[ary.<span class="property">lenght</span>]=res[<span class="number">0</span>];<span class="comment">//把每次捕获的结果存放在数组的末尾</span></span><br><span class="line">res=<span class="variable language_">this</span>.<span class="title function_">exec</span>(str);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ary;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">*生活如此美好，何必这么麻烦和纠结</span></span><br><span class="line"><span class="comment">*字符串中有个方法叫mach,执行这个方法，也可以把所有匹配的内容，一次性捕获到，但是前**提正则需要加g，不加g，也之恩那个捕获到一个</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">var</span> reg=<span class="regexp">/\d+/g</span>;</span><br><span class="line"><span class="keyword">var</span> str=<span class="string">&#x27;zhufeng2017haha2018hehe2019&#x27;</span>;</span><br><span class="line">str.<span class="title function_">match</span>(reg);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">*生活难道如此简单吗？</span></span><br><span class="line"><span class="comment">*match虽然很简单暴力,但是在需要捕获小分组内容的时候，就不太符合我们的需求了，因为*match只能把大正则匹配捕获到，对于小分组匹配的无法捕获</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">var</span> ary=[<span class="string">&#x27;zxt&#x27;</span>,<span class="number">28</span>];</span><br><span class="line"><span class="keyword">var</span> str=<span class="string">&#x27;my name is &#123;0&#125;,i am &#123;1&#125; years old~~;</span></span><br><span class="line"><span class="string">我们想把&#123;0&#125;替换成ary[0]</span></span><br><span class="line"><span class="string">我们想把&#123;1&#125;替换成ary[1]</span></span><br><span class="line"><span class="string">我们既要捕获到&#123;数字&#125;,也需要把里面的数字单独获取到(因为这个数字可以充当我们在数组中获取内容的索引)</span></span><br><span class="line"><span class="string">var reg=/\&#123;\d+&#125;/g //大正则匹配的是大括号中包含数字，第一个小分组匹配的是大括号中的数字</span></span><br><span class="line"><span class="string">reg.exec(str);//[&quot;&#123;0&#125;&quot;,&quot;0&quot;...]第一项大正则匹配的结果，也就是使用exec可以捕获到小分组匹配的内容</span></span><br><span class="line"><span class="string">reg.exec(str)//[&quot;&#123;1&#125;&quot;,&quot;1&quot;...]</span></span><br><span class="line"><span class="string">str.match(reg);//[&quot;&#123;0&#125;&quot;,&quot;&#123;1&#125;&quot;]使用match只能捕获到大正则匹配的，小分组匹配的获取不到,match并不是所有的情况下，都捕获不到分组的内容，当需要捕获一次可以完成的时候，match获取的结果和exec一样</span></span><br><span class="line"><span class="string">/*</span></span><br><span class="line"><span class="string">*var reg=/^(\d&#123;6&#125;)(\d&#123;4&#125;)(\d&#123;2&#125;)(\d&#123;2&#125;)\d&#123;2&#125;(\d&#123;1&#125;)(?:\d|X)$/;  //身份*证正则</span></span><br><span class="line"><span class="string">*var str = &#x27;</span><span class="number">130828198802240761</span><span class="string">&#x27;;</span></span><br><span class="line"><span class="string">*.str.match(reg); //-&gt;[&quot;130828198802240761&quot;, &quot;130828&quot;, &quot;1988&quot;, &quot;02&quot;, &quot;24&quot;, &quot;6&quot;...]</span></span><br><span class="line"><span class="string">*</span></span><br><span class="line"><span class="string">*/</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">/*</span></span><br><span class="line"><span class="string">*test在某些时候，也是实现捕获的：我们就可以使用一些特殊的手段，把查找的内容取出来</span></span><br><span class="line"><span class="string">*/</span></span><br><span class="line"><span class="string">var str=&#x27;</span>my name is &#123;<span class="number">0</span>&#125;,i am &#123;<span class="number">1</span>&#125; years old~~<span class="string">&#x27;</span></span><br><span class="line"><span class="string">var reg=/[&#123;\d+\&#125;]/g</span></span><br><span class="line"><span class="string">reg.test(str);</span></span><br><span class="line"><span class="string">console.log(RegExp.$1);//-&gt;获取第一次捕获的时候,第一个分组中的内容($1) =&gt;&#x27;</span><span class="number">0</span><span class="string">&#x27;</span></span><br><span class="line"><span class="string">reg.test(str);</span></span><br><span class="line"><span class="string">console.log(RegExp.$1); //=&gt;&#x27;</span><span class="number">1</span><span class="string">&#x27; 并且执行test,如果设置了g，也是可以修改lastIndex的</span></span><br><span class="line"><span class="string">reg.exec(str); //-&gt;null</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">解决正则的懒惰性：</span></span><br><span class="line"><span class="string">执行exec后，让lastIndex值变为当前这一次捕获的结束位置，这样下一次捕获的时候，就可以接着继续查找了（而不是从头开始了）</span></span><br><span class="line"><span class="string">我们只需要给正则加一个全局修饰符g,就可以在每一次执行exec后，自动修改lastIndex的值了</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">exec：可以实现正则的捕获，每一次执行exec只能捕获到一个匹配的结果，而且结果是一个数组</span></span><br><span class="line"><span class="string">第一项：当前正则捕获的内容（字符串）</span></span><br><span class="line"><span class="string">index:当前正则捕获的起始索引</span></span><br><span class="line"><span class="string">input:当前操作的原始字符串</span></span><br></pre></td></tr></table></figure><p><img src="/./1502011105219.png" alt="Alt text"></p><blockquote><p>上面是正则捕获：懒惰性，正则捕获还有一个特点：贪婪性<br>var str&#x3D;’zhufeng2017peixun2018’<br>var reg&#x3D; &#x2F;\d+&#x2F;g<br>reg.exec(str);&#x2F;&#x2F;-&gt;[‘2017’…] 每一次捕获的时候都是把当前正则匹配最长结果捕获到-&gt;贪婪性<br>取消贪婪性：在量词元字符后面加一个问号就可以了<br>&#x2F;&#x2F;1问号作用很多，如果放在一个非量词元字符的后面，他本身就代表出现零次或者一次的量词元字符<br>&#x2F;&#x2F;2如果出现在量词元字符的后面，他本身是取消捕获时候的贪婪性的<br>var str&#x3D;’zhufeng2017peixun2018’;<br>var reg&#x3D;&#x2F;\d+?&#x2F;g;<br>reg.exec(str); &#x2F;&#x2F;-&gt;[‘2’…]</p></blockquote><p>&#x2F;&#x2F;3 ?:只匹配不捕获<br>&#x2F;&#x2F;4 ?&#x3D;正向预查<br>&#x2F;&#x2F;5 ?!负向预查</p><p>#####9.正则创建</p><blockquote><p>[实例创建]<br><code>var reg=new RegExp(&#39;^&amp;&#39;,&#39;img&#39;)</code><br>[字面量创建]<br><code>var ret=/^$/img</code></p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">//创建一个正则，正则的规则是str变量存储的值，在这个值的左右两边各有一个@</span><br><span class="line">var str=&#x27;zhufeng&#x27;;</span><br><span class="line">var reg=/@zhufeng@/;//如果str存储的值变为&#x27;piexun&#x27;了，我们正则中的zhufeng ,也应该是peixun</span><br><span class="line">//-----------------不行</span><br><span class="line">var reg=/@&#x27;+str+&#x27;@/;//让第一个‘出现1到除此’，让r也出现已到多次...整个本身就不是字符串，何谈字符串拼接=》字面量创建方式中，斜杠包起来的所有字符都是元字符</span><br><span class="line"></span><br><span class="line">//-----------------</span><br><span class="line">var reg=new RegExp(&#x27;@&#x27;+str+&#x27;@&#x27;);//实例创建方式，第一参数是一个存放元字符的字符串，我们则可以使用字符串拼接把一个变量的值动态设为正则的规则。</span><br></pre></td></tr></table></figure><blockquote><p>使用实例创建的时候，我们在字符串中出现的元字符，有一些比较特殊，\d不是0-9之间的数字，\d需要写成\d才可以，在实例创建中出现的所有斜杠是两个才可以</p></blockquote><p><img src="/./1502253959564.png" alt="Alt text"></p><p>#####10.——正则实战——<br><code>str.replace</code>:替换</p><blockquote><p>此方法一般都是和正则搭配使用的，否则有很多的替换需求根本是无法实现的。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var str=&#x27;zhufeng2017zhufeng2018&#x27;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>[str].replace([reg],[function])</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">1.首先让reg和str进行匹配，每当匹配到一次，都会把function执行一次</span><br><span class="line">2.每当执行function的时候浏览器都会把当前匹配捕获的结果(原理是使用exec捕获)作为实参传递给这个函数</span><br><span class="line">3.在方法中出现的return后面是啥，都相当于把当前大正则匹配的结果替换成啥</span><br><span class="line">//举个例子</span><br><span class="line">var str=&#x27;zhu2017feng2018pei2019xun2020&#x27;</span><br><span class="line">var reg=/\d+/g</span><br><span class="line">str=str.replace(reg,function()&#123;</span><br><span class="line">console.log(&#x27;OK&#x27;)//&#x27;ok&#x27;*4正zcxxxx则匹配了四次，我们传递的函数也执行了四次</span><br><span class="line">console.log(arguments)//第一次2017,第二次2018,第三次2019,第四次2020。每当执行这个方法的时候，浏览器都会把使用exec捕获到的结果作为实参传递这个函数。</span><br><span class="line">return @;函数中返回的是啥，当前大正则匹配的那个字符，就被替换成啥。//zhu@pei@xun@</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">想把字符串的阿拉伯数字替换为中文汉字</span><br><span class="line">var str=&#x27;每月工资16524&#x27;;</span><br><span class="line">想把字符串变为&#x27;壹陆伍貳肆&#x27;：所有的阿拉伯数字变为中文大写的汉字</span><br><span class="line">var ary=[&#x27;零&#x27;,&#x27;貳&#x27;,&#x27;叁&#x27;,&#x27;肆&#x27;,&#x27;伍&#x27;,&#x27;陆&#x27;,&#x27;柒&#x27;,&#x27;捌&#x27;,&#x27;玖&#x27;,&#x27;拾&#x27;]</span><br><span class="line">for(var i=0 i&lt;ary.length;i++)&#123;</span><br><span class="line">var cur=ary[i];</span><br><span class="line">str=str.replace(cur,str[cur]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">str=str.replace(/\d/g,function()&#123;</span><br><span class="line">return ary[arguments[0]]</span><br><span class="line">&#125;);</span><br><span class="line">console.log(str)</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">//-&gt;当前字符串中哪一个字母出现的次数最多，出现了多少次</span><br><span class="line">var str = &#x27;hello，my name is tom，i am 25 years old，i com from mars！&#x27;;</span><br><span class="line"></span><br><span class="line">//1、获取每一个字母出现的次数</span><br><span class="line">var obj = &#123;&#125;;</span><br><span class="line">str.replace(/[a-zA-Z]/g, function () &#123;</span><br><span class="line">    var val = arguments[0];//-&gt;每一次捕获到的字母</span><br><span class="line">    if (obj.hasOwnProperty(val)) &#123;</span><br><span class="line">        //-&gt;当前这个字母已经存储过了</span><br><span class="line">        //-&gt;我们让其出现的次数累加一即可</span><br><span class="line">        obj[val]++;</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">    //-&gt;当前字母还没有存储过,我们赋值为一,代表只出现一次</span><br><span class="line">    obj[val] = 1;</span><br><span class="line">&#125;);</span><br><span class="line">//console.log(obj);//-&gt;&#123;h: 1, e: 3, m: 7…&#125;</span><br><span class="line"></span><br><span class="line">//2、获取最多出现的次数</span><br><span class="line">var max = 1;//-&gt;假设出现次数最多一次</span><br><span class="line">for (var key in obj) &#123;</span><br><span class="line">    if (obj.hasOwnProperty(key)) &#123;</span><br><span class="line">        obj[key] &gt; max ? max = obj[key] : null;//-&gt;如果当前字母出现的次数比假设的还要大,修改假设的值</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//3、根据最多出现的次数获取对应的字母</span><br><span class="line">var ary = [];</span><br><span class="line">for (key in obj) &#123;</span><br><span class="line">    if (obj.hasOwnProperty(key)) &#123;</span><br><span class="line">        obj[key] === max ? ary.push(key) : null;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">console.log(&#x27;最多出现：&#x27; + max + &#x27;次，对应的字母分别为：&#x27; + ary.join(&#x27;|&#x27;));</span><br><span class="line"></span><br><span class="line">-------------------</span><br><span class="line">方案2</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">var str = &#x27;hello，my name is tom，i am 25 years old，i com from mars！&#x27;;</span><br><span class="line"></span><br><span class="line">//-&gt;把所有的非字母都替换掉</span><br><span class="line">str = str.replace(/[^a-zA-Z]/g, &#x27;&#x27;);</span><br><span class="line"></span><br><span class="line">//-&gt;把剩下的纯字母进行排序</span><br><span class="line">str = str.split(&#x27;&#x27;).sort(function (a, b) &#123;</span><br><span class="line">    return a.localeCompare(b);</span><br><span class="line">&#125;).join(&#x27;&#x27;);</span><br><span class="line">//-&gt;str:&#x27;aaaacdeeefhii...&#x27;</span><br><span class="line"></span><br><span class="line">//-&gt;把相邻一样的字母分别的捕获到,然后按照长度排序</span><br><span class="line">var ary = str.match(/(.)\1*/g);</span><br><span class="line">ary.sort(function (a, b) &#123;</span><br><span class="line">    return b.length - a.length;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">//-&gt;获取最后想要的结果</span><br><span class="line">var max = ary[0].length,</span><br><span class="line">    res = [];</span><br><span class="line">for (var i = 0; i &lt; ary.length; i++) &#123;</span><br><span class="line">    var cur = ary[i];</span><br><span class="line">    if (cur.length !== max) break;</span><br><span class="line">    res[res.length] = cur.substr(0, 1);</span><br><span class="line">&#125;</span><br><span class="line">console.log(max + &#x27;&lt;=&gt;&#x27; + res);</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">var str = &#x27;my name is &#123;0&#125;，i am &#123;1&#125; years old，i can &#123;2&#125;。&#x27;;</span><br><span class="line">var ary = [&#x27;zxt&#x27;, 28, &#x27;js&#x27;];</span><br><span class="line">str = str.replace(/\&#123;(\d+)\&#125;/g, function () &#123;</span><br><span class="line">    //-&gt;arguments[0]:本次大正则捕获的内容</span><br><span class="line">    //-&gt;arguments[1]:本次第一个小分组捕获的内容</span><br><span class="line">    return ary[arguments[1]]</span><br><span class="line">&#125;);</span><br><span class="line">console.log(str);</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">var str = &#x27;hello，my name is tom，i am 25 years old，i com from mars！&#x27;;</span><br><span class="line">str = str.replace(/\b([a-z])[a-z]*\b/ig, function () &#123;</span><br><span class="line">    var arg = arguments;</span><br><span class="line">    return arg[1].toUpperCase() + arg[0].substr(1);</span><br><span class="line">&#125;);</span><br><span class="line">console.log(str);</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> 正则 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>音乐-1990-1999年金曲</title>
      <link href="/posts/2081698680.html"/>
      <url>/posts/2081698680.html</url>
      
        <content type="html"><![CDATA[<div style="position: relative; padding-bottom: 56.25%; height: 0;">  <video src="https://v2.kwaicdn.com/ksc2/22GHp1A7BE-yVvBQY8dVVtJu8UbkgE7QNrcKdzky9KsyxQpjrKDoQ3vyaggpMGQrhLFEfXLyi2ZzdR-uSG6lmOjM7dIBkFA_avyWixwV67962r3RSH0VWFDA6opqBMIqz9V7D4K2hv7DFGfpkQwKvnq5W_knfRVu4xnuAkb23CVNyMiHj7_6QMl_cXk6H1i9.mp4?pkey=AAWV_tX8_XkDFNMSEAZwX8_pJV1K5JPmmn0V1NTaWQfPmm1vlMSwbXZsXrccZILgNskRCLWdGmJfGKnsPwk1G_eIvGC_FndyaEmSFAJklRG6iMlc0Vn4euS_MqmMV0Gs68g&tag=1-1702968277-unknown-0-c2glsfrkk3-f336f16901f2ff0b&clientCacheKey=3x2qx3j5gye4a29_b.mp4" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%;" controls>    Your browser does not support the video tag.  </video></div>]]></content>
      
      
      <categories>
          
          <category> 视频 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Videos </tag>
            
            <tag> Movie </tag>
            
            <tag> Music </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>影视-喜剧之王-剪辑</title>
      <link href="/posts/1902022568.html"/>
      <url>/posts/1902022568.html</url>
      
        <content type="html"><![CDATA[<div style="position: relative; padding-bottom: 56.25%; height: 0;">  <video src="https://v2.kwaicdn.com/ksc2/yaAuUP7QoTTiLIwAO1hXB_-mW_bU5OeCuOLtjP72LIDEkqO76V-eZhomaC9F6lcgV_qI02ca0tJBnYumEcVMACsdSrkiVzE5MKMWV9vaewPUPKEXCdDO7eCy9KS2O9eCol-8-c1PGlZMbt0cgjBVssh3NtOoW0qMo4O9QYRFuKGmAYUpEu4LU0pszZNU_rGp.mp4?pkey=AAWIhC05E2dUuy1sQhjHzMeqO_To8vT8mfbNsOkzkwzfZqx2fPIHNnr5oaIaS5kbrVHtzX7tvNg7TuGPZPVzq5x7wIA0tcQkBTjISmAz9FX9J8w1XzQ-IVUmUSNZyc9qMf0&tag=1-1702968482-unknown-0-ic2ol48bwl-05a4f168a6b03cfd&clientCacheKey=3x3cfs6fxx59smm_b.mp4" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%;" controls>    Your browser does not support the video tag.  </video></div>   ]]></content>
      
      
      <categories>
          
          <category> 视频 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Videos </tag>
            
            <tag> Movie </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>elasticsearch+kibana快照实现迁移及恢复</title>
      <link href="/posts/1818393960.html"/>
      <url>/posts/1818393960.html</url>
      
        <content type="html"><![CDATA[<h1 id="1-全部索引存储快照及恢复"><a href="#1-全部索引存储快照及恢复" class="headerlink" title="1. 全部索引存储快照及恢复"></a>1. 全部索引存储快照及恢复</h1><h2 id="1-1-全部索引存储快照"><a href="#1-1-全部索引存储快照" class="headerlink" title="1.1 全部索引存储快照"></a>1.1 全部索引存储快照</h2><h3 id="1-1-2-全部索引注册快照存储库"><a href="#1-1-2-全部索引注册快照存储库" class="headerlink" title="1.1.2 全部索引注册快照存储库"></a>1.1.2 全部索引注册快照存储库</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">PUT _snapshot/old_k8s-prod-info</span><br><span class="line">&#123;</span><br><span class="line">&quot;type&quot;: &quot;fs&quot;,</span><br><span class="line">&quot;settings&quot;: &#123;</span><br><span class="line">&quot;location&quot;: &quot;/usr/share/elasticsearch/es-back/snapshot01&quot;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-1-2-快照全部索引"><a href="#1-1-2-快照全部索引" class="headerlink" title="1.1.2 快照全部索引"></a>1.1.2 快照全部索引</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PUT _snapshot/old_k8s-prod-info/backup_all?wait_for_completion=true</span><br></pre></td></tr></table></figure><h3 id="1-1-3-查看快照进度"><a href="#1-1-3-查看快照进度" class="headerlink" title="1.1.3 查看快照进度"></a>1.1.3 查看快照进度</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">GET _snapshot/old_k8s-prod-info/backup_all/_status</span><br><span class="line">- grep state</span><br><span class="line">- started:正在同步</span><br><span class="line">- success:成功</span><br><span class="line">- failed：失败</span><br></pre></td></tr></table></figure><h2 id="1-2-恢复"><a href="#1-2-恢复" class="headerlink" title="1.2 恢复"></a>1.2 恢复</h2><h3 id="1-2-1-注册快照存储库"><a href="#1-2-1-注册快照存储库" class="headerlink" title="1.2.1 注册快照存储库"></a>1.2.1 注册快照存储库</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">PUT _snapshot/old_k8s-prod-info</span><br><span class="line">&#123;</span><br><span class="line">&quot;type&quot;: &quot;fs&quot;,</span><br><span class="line">&quot;settings&quot;: &#123;</span><br><span class="line">&quot;location&quot;: &quot;/usr/share/elasticsearch/es-back/snapshot01&quot;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-2-2-恢复全部索引"><a href="#1-2-2-恢复全部索引" class="headerlink" title="1.2.2 恢复全部索引"></a>1.2.2 恢复全部索引</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">POST _snapshot/old_k8s-prod-info/backup_all/_restore</span><br></pre></td></tr></table></figure><h3 id="1-2-3-查看快照恢复进度"><a href="#1-2-3-查看快照恢复进度" class="headerlink" title="1.2.3 查看快照恢复进度"></a>1.2.3 查看快照恢复进度</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET _cat/recovery?v</span><br></pre></td></tr></table></figure><h1 id="2-指定索引快照及恢复"><a href="#2-指定索引快照及恢复" class="headerlink" title="2. 指定索引快照及恢复"></a>2. 指定索引快照及恢复</h1><h2 id="2-1-指定索引快照"><a href="#2-1-指定索引快照" class="headerlink" title="2.1  指定索引快照"></a>2.1  指定索引快照</h2><h3 id="2-1-1-指定索引注册快照存储库"><a href="#2-1-1-指定索引注册快照存储库" class="headerlink" title="2.1.1 指定索引注册快照存储库"></a>2.1.1 指定索引注册快照存储库</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">PUT _snapshot/old_k8s-prod-info</span><br><span class="line">&#123;</span><br><span class="line">&quot;type&quot;: &quot;fs&quot;,</span><br><span class="line">&quot;settings&quot;: &#123;</span><br><span class="line">&quot;location&quot;: &quot;/usr/share/elasticsearch/es-back/snapshot1119&quot;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-1-2-指定索引存储快照"><a href="#2-1-2-指定索引存储快照" class="headerlink" title="2.1.2 指定索引存储快照"></a>2.1.2 指定索引存储快照</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">PUT _snapshot/old_k8s-prod-info/k8s-prod-info-2023.11.19?wait_for_completion=true</span><br><span class="line">&#123;</span><br><span class="line">&quot;indices&quot;: &quot;k8s-prod-info-2023.11.19&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-1-3-查看指定索引快照进度"><a href="#2-1-3-查看指定索引快照进度" class="headerlink" title="2.1.3 查看指定索引快照进度"></a>2.1.3 查看指定索引快照进度</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET _snapshot/old_k8s-prod-info/k8s-prod-info-2023.11.19/_status</span><br></pre></td></tr></table></figure><h2 id="2-2-恢复"><a href="#2-2-恢复" class="headerlink" title="2.2 恢复"></a>2.2 恢复</h2><h3 id="2-2-1-指定索引注册快照存储库"><a href="#2-2-1-指定索引注册快照存储库" class="headerlink" title="2.2.1 指定索引注册快照存储库"></a>2.2.1 指定索引注册快照存储库</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">PUT _snapshot/old_k8s-prod-info</span><br><span class="line">&#123;</span><br><span class="line">&quot;type&quot;: &quot;fs&quot;,</span><br><span class="line">&quot;settings&quot;: &#123;</span><br><span class="line">&quot;location&quot;: &quot;/usr/share/elasticsearch/es-back/snapshot1119&quot;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-2-2-恢复指定索引"><a href="#2-2-2-恢复指定索引" class="headerlink" title="2.2.2 恢复指定索引"></a>2.2.2 恢复指定索引</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">POST _snapshot/old_k8s-prod-info/k8s-prod-info-2023.11.19/_restore</span><br><span class="line">&#123;</span><br><span class="line">&quot;indices&quot;: &quot;k8s-prod-info-2023.11.19&quot;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">替换索引名称恢复</span></span><br><span class="line">POST _snapshot/old_k8s-prod-info/k8s-prod-info-2023.11.19/_restore</span><br><span class="line">&#123;</span><br><span class="line">  &quot;indices&quot;: &quot;k8s-prod-info-2023.11.19&quot;,</span><br><span class="line">  &quot;rename_pattern&quot;: &quot;k8s-prod-info-2023.11.19&quot;,</span><br><span class="line">  &quot;rename_replacement&quot;: &quot;k8s-prod-info-2023.11.19-old&quot;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h3 id="2-2-3-查看快照恢复进度"><a href="#2-2-3-查看快照恢复进度" class="headerlink" title="2.2.3 查看快照恢复进度"></a>2.2.3 查看快照恢复进度</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">GET _cat/recovery?v</span><br><span class="line">- 显示100%完成</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> k8s </category>
          
          <category> ElasticSearch </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ElasticSearch </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>歌曲推荐</title>
      <link href="/posts/1355304993.html"/>
      <url>/posts/1355304993.html</url>
      
        <content type="html"><![CDATA[<h2 id="好听歌单："><a href="#好听歌单：" class="headerlink" title="好听歌单："></a>好听歌单：</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0001 冬天的秘密</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 音乐 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Music </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mysql 删除重复数据</title>
      <link href="/posts/3265730413.html"/>
      <url>/posts/3265730413.html</url>
      
        <content type="html"><![CDATA[<h1 id="Mysql如何删除重复数据"><a href="#Mysql如何删除重复数据" class="headerlink" title="Mysql如何删除重复数据"></a>Mysql如何删除重复数据</h1><h2 id="项目背景："><a href="#项目背景：" class="headerlink" title="项目背景："></a>项目背景：</h2><p>在RocketMQ的消费者服务中，发现了重复消费的情况，为了处理，需先将消费者停止消费，去重消息ID重复的数据，再给消息ID设置唯一索引。</p><h3 id="方法一：使用临时表"><a href="#方法一：使用临时表" class="headerlink" title="方法一：使用临时表"></a><strong>方法一：使用临时表</strong></h3><ul><li>创建一个临时表，用于存储要保留的数据。</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> consumer_crm_record_tmp <span class="keyword">LIKE</span> consumer_crm_record;</span><br></pre></td></tr></table></figure><ul><li>将要保留的数据存储到临时表中</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> consumer_crm_record_tmp</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">MAX</span>(id) <span class="keyword">AS</span> id,message_id,message,response</span><br><span class="line"><span class="keyword">FROM</span> consumer_crm_record</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> message_id;</span><br></pre></td></tr></table></figure><ul><li>删除原表中的数据</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span>  consumer_crm_record</span><br></pre></td></tr></table></figure><ul><li>将临时表中的数据加入到原表中</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> consumer_crm_record</span><br><span class="line"><span class="keyword">SELECT</span>  id,message_id,message,response</span><br><span class="line"><span class="keyword">FROM</span> consumer_crm_record_tmp;</span><br></pre></td></tr></table></figure><ul><li>删除临时表</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> consumer_crm_record_tmp;</span><br></pre></td></tr></table></figure><p>创建临时表的优点：</p><ul><li>简单直观：通过创建临时表，您可以明确地将要删除的数据和要保留的数据分开存储，易于理解和管理。</li><li>可读性好：临时表的使用可以使查询语句更易读，特别是对于复杂的逻辑操作。</li><li>可以灵活处理：临时表可以在多个查询之间使用，可以执行额外的操作，例如插入、更新或查询临时表的数据。</li></ul><p>创建临时表的缺点：</p><ul><li>需要额外的存储空间：创建临时表需要占用额外的存储空间，特别是在处理大量数据时可能会对磁盘空间造成一定的压力。</li><li>需要额外的操作及权限：创建、插入和删除临时表需要执行额外的数据库操作，增加了一定的复杂性。</li></ul><h3 id="方法二：使用left-join-删除（强烈推荐）"><a href="#方法二：使用left-join-删除（强烈推荐）" class="headerlink" title="方法二：使用left join 删除（强烈推荐）"></a><strong>方法二：使用left join 删除（强烈推荐）</strong></h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> t1 </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">        consumer_crm_record t1</span><br><span class="line">        <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> ( <span class="keyword">SELECT</span> <span class="built_in">MAX</span>( id ) <span class="keyword">AS</span> max_id, message_id <span class="keyword">FROM</span> consumer_crm_record <span class="keyword">GROUP</span> <span class="keyword">BY</span> message_id ) t2 <span class="keyword">ON</span> t1.message_id <span class="operator">=</span> t2.message_id </span><br><span class="line">        <span class="keyword">AND</span> t1.id <span class="operator">=</span> t2.max_id </span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">        t2.max_id <span class="keyword">IS</span> <span class="keyword">NULL</span>;</span><br></pre></td></tr></table></figure><p>这个查询将根据message_id进行分组，并保留每个组中的最大id。然后，它使用左连接将原始表与这些最大id进行比较。如果连接失败（即max_id为NULL），则表示该行不是具有最大id的行，因此将被删除。</p><p>LEFT JOIN的优点：</p><ul><li>可以利用索引：LEFT JOIN 可以利用索引来加速查询，特别是在连接字段上存在索引的情况下。</li><li>更高的灵活性：LEFT JOIN 可以与其他表达式和条件组合使用，使得查询可以更加灵活。</li></ul><p>LEFT JOIN的缺点：</p><ul><li>性能可能受限：当处理大量数据时，LEFT JOIN 可能会导致较慢的查询速度，尤其是在连接字段没有索引或使用了复杂的连接条件时。</li><li>查询复杂度高：使用 LEFT JOIN 进行连接查询时，需要编写较为复杂的查询语句，对于新手而言可能会比较困难。</li></ul><h3 id="方法三：使用not-in-删除"><a href="#方法三：使用not-in-删除" class="headerlink" title="方法三：使用not in 删除"></a><strong>方法三：使用not in 删除</strong></h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line"> consumer_crm_record t1 </span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line"> id <span class="keyword">NOT</span> <span class="keyword">IN</span> ( <span class="keyword">SELECT</span> max_id <span class="keyword">FROM</span> ( <span class="keyword">SELECT</span> <span class="built_in">MAX</span>( id ) <span class="keyword">AS</span> max_id <span class="keyword">FROM</span> consumer_crm_record <span class="keyword">GROUP</span> <span class="keyword">BY</span> message_id) tmp );</span><br></pre></td></tr></table></figure><p>NOT IN的优点：</p><ul><li>简单易用：NOT IN 是一种直观简单的方式来筛选出不在指定列表中的数据。</li><li>可读性好：NOT IN 子句的语义明确，易于理解和维护。</li></ul><p>NOT IN的缺点：</p><ul><li>性能可能较低：NOT IN 子查询对于大型数据集可能会导致较慢的查询速度，尤其是在子查询中返回大量结果时。</li><li>NULL 值处理：NOT IN 子句在处理 NULL 值时需要特别注意，因为 NULL 的处理可能会导致意外的结果。</li></ul><h3 id="方法四：使用窗口函数（MySQL-8-0以上支持）"><a href="#方法四：使用窗口函数（MySQL-8-0以上支持）" class="headerlink" title="方法四：使用窗口函数（MySQL 8.0以上支持）"></a><strong>方法四：使用窗口函数（MySQL 8.0以上支持）</strong></h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DELETE</span></span><br><span class="line"><span class="keyword">FROM</span> consumer_crm_record</span><br><span class="line"><span class="keyword">WHERE</span> id <span class="keyword">in</span> (</span><br><span class="line">    <span class="keyword">SELECT</span> id</span><br><span class="line">    <span class="keyword">FROM</span>(</span><br><span class="line">        <span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line">        <span class="keyword">FROM</span> (</span><br><span class="line">            <span class="keyword">SELECT</span> <span class="built_in">ROW_NUMBER</span>() <span class="keyword">OVER</span> w <span class="keyword">AS</span> row_num,id</span><br><span class="line">            <span class="keyword">FROM</span> consumer_crm_record  <span class="keyword">where</span> message_id <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">null</span></span><br><span class="line">            <span class="keyword">WINDOW</span> w <span class="keyword">AS</span> (<span class="keyword">PARTITION</span> <span class="keyword">BY</span> message_id <span class="keyword">ORDER</span> <span class="keyword">BY</span> id)</span><br><span class="line">        )t</span><br><span class="line">        <span class="keyword">WHERE</span> row_num <span class="operator">&gt;</span><span class="number">1</span></span><br><span class="line">    )e</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>窗口函数的优点：</p><ul><li>简化查询逻辑：使用窗口函数可以在单个查询中完成去重操作，而不需要使用其他复杂的子查询或连接操作。这简化了查询逻辑，使查询更易读和维护。</li><li>高效性能：窗口函数在处理大型数据集时通常比传统的子查询或连接操作更高效。窗口函数可以在单个扫描中计算结果，而不需要多次访问数据表。</li><li>保留原始数据：使用窗口函数进行去重操作时，您可以保留原始数据表中的所有列，并在结果中添加去重的标识。这使得您可以查看去重结果与原始数据之间的关系，并进行进一步的分析和处理。</li></ul><p>窗口函数的缺点：</p><ul><li>学习曲线：窗口函数是一种高级的SQL功能，相对于传统的查询语法来说，使用窗口函数可能需要一些学习和理解。如果您对窗口函数不熟悉，可能需要花费一些时间来学习和了解其语法和用法。</li><li>版本兼容性：窗口函数在MySQL中的支持是在版本8.0之后引入的。如果您使用的是较旧的MySQL版本，那么窗口函数可能不可用，您将无法使用窗口函数进行去重操作。</li><li>内存消耗：窗口函数可能需要在内存中保存一些额外的中间结果，尤其是在处理大型数据集时。这可能会导致一些额外的内存消耗。因此，在使用窗口函数进行去重操作时，需要注意内存使用情况，并确保系统具有足够的内存资源。</li></ul><h3 id="创建唯一索引"><a href="#创建唯一索引" class="headerlink" title="创建唯一索引"></a><strong>创建唯一索引</strong></h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">UNIQUE</span> INDEX idx_message_id <span class="keyword">on</span> consumer_crm_record(message_id);</span><br></pre></td></tr></table></figure><h3 id="在百万级表中执行中发现报错：1206-the-total-number-of-locks-exceeds-the-lock-table-size"><a href="#在百万级表中执行中发现报错：1206-the-total-number-of-locks-exceeds-the-lock-table-size" class="headerlink" title="在百万级表中执行中发现报错：1206- the total number of locks exceeds the lock table size"></a><strong>在百万级表中执行中发现报错：1206- the total number of locks exceeds the lock table size</strong></h3><p>innodb_buffer_pool    mysql缓冲池太小  默认为16M</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span>  variables  <span class="keyword">like</span> <span class="string">&#x27;%innodb_buffer_pool_size%&#x27;</span></span><br></pre></td></tr></table></figure><p>修改缓冲池大小为2G</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SET</span> <span class="keyword">GLOBAL</span> innodb_buffer_pool_size<span class="operator">=</span><span class="number">2147483648</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Elasticsearch查询中的must和should混合使用的行为解析</title>
      <link href="/posts/529135365.html"/>
      <url>/posts/529135365.html</url>
      
        <content type="html"><![CDATA[<h1 id="ElasticSearch查询中的must和should混合使用的行为解析"><a href="#ElasticSearch查询中的must和should混合使用的行为解析" class="headerlink" title="ElasticSearch查询中的must和should混合使用的行为解析"></a>ElasticSearch查询中的must和should混合使用的行为解析</h1><p>最近在做能力开放平台，其中的功能包含日志的查看，根据用户展示对应的日志信息，在根据用户权限查询相应的日志的时候发现同时使用<code>must</code>和<code>should</code>查询日志时会查到一些本不符合条件的数据，特此记录。</p><p><img src="https://fx-blog-images.oss-cn-beijing.aliyuncs.com/java/elastic-logo-H-full_color_ee411853-9a41-4fd0-b538-63bd5db7672b.png" alt="img"></p><p>在ElasticSearch中，我们可以使用<code>must</code>和<code>should</code>子句来构建复杂的查询。<code>must</code>子句表示所有条件都必须满足才能匹配文档，而<code>should</code>子句表示其中至少一个条件满足即可匹配文档。</p><p>然而，当<code>should</code>子句下的所有条件都不满足时，仍然可能查询出结果的情况可能会让人感到困惑。这是由于ElasticSearch的查询机制中的一个特性所导致的。</p><h2 id="查询机制解析"><a href="#查询机制解析" class="headerlink" title="查询机制解析"></a>查询机制解析</h2><p>ElasticSearch在处理查询时，会计算每个文档的相关性得分（relevance score），并根据得分进行排序。而<code>should</code>子句下的条件并不是强制要求满足的条件，而是用于调整相关性得分的因素。</p><p>当一个文档的<code>should</code>子句下的条件都不满足时，这些条件不会导致文档被排除在结果之外。相反，ElasticSearch会根据其他条件和相关性得分来决定文档是否匹配，并将其包含在结果中。</p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>如果您希望确保<code>should</code>子句下的条件必须满足才能匹配文档，可以使用布尔查询（bool query）的<code>minimum_should_match</code>参数。该参数指定了<code>should</code>子句下至少需要满足的条件数量。</p><p>以下是一个示例布尔查询的使用：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;query&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;bool&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;filter&quot;</span><span class="punctuation">:</span><span class="punctuation">[</span></span><br><span class="line">                <span class="punctuation">&#123;</span></span><br><span class="line">                    <span class="attr">&quot;range&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">                        <span class="attr">&quot;timeLocal.keyword&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">                            <span class="attr">&quot;from&quot;</span><span class="punctuation">:</span><span class="string">&quot;2023-11-23 00:00:00&quot;</span><span class="punctuation">,</span></span><br><span class="line">                            <span class="attr">&quot;to&quot;</span><span class="punctuation">:</span><span class="string">&quot;2023-11-23 23:59:59&quot;</span><span class="punctuation">,</span></span><br><span class="line">                            <span class="attr">&quot;include_lower&quot;</span><span class="punctuation">:</span><span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">                            <span class="attr">&quot;include_upper&quot;</span><span class="punctuation">:</span><span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">                            <span class="attr">&quot;boost&quot;</span><span class="punctuation">:</span><span class="number">1</span></span><br><span class="line">                        <span class="punctuation">&#125;</span></span><br><span class="line">                    <span class="punctuation">&#125;</span></span><br><span class="line">                <span class="punctuation">&#125;</span></span><br><span class="line">            <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;should&quot;</span><span class="punctuation">:</span><span class="punctuation">[</span></span><br><span class="line">                <span class="punctuation">&#123;</span></span><br><span class="line">                    <span class="attr">&quot;match_phrase&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">                        <span class="attr">&quot;appId.keyword&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">                            <span class="attr">&quot;query&quot;</span><span class="punctuation">:</span><span class="string">&quot;20231025001560&quot;</span><span class="punctuation">,</span></span><br><span class="line">                            <span class="attr">&quot;slop&quot;</span><span class="punctuation">:</span><span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">                            <span class="attr">&quot;zero_terms_query&quot;</span><span class="punctuation">:</span><span class="string">&quot;NONE&quot;</span><span class="punctuation">,</span></span><br><span class="line">                            <span class="attr">&quot;boost&quot;</span><span class="punctuation">:</span><span class="number">1</span></span><br><span class="line">                        <span class="punctuation">&#125;</span></span><br><span class="line">                    <span class="punctuation">&#125;</span></span><br><span class="line">                <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="punctuation">&#123;</span></span><br><span class="line">                    <span class="attr">&quot;match_phrase&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">                        <span class="attr">&quot;appId.keyword&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">                            <span class="attr">&quot;query&quot;</span><span class="punctuation">:</span><span class="string">&quot;20231124009319&quot;</span><span class="punctuation">,</span></span><br><span class="line">                            <span class="attr">&quot;slop&quot;</span><span class="punctuation">:</span><span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">                            <span class="attr">&quot;zero_terms_query&quot;</span><span class="punctuation">:</span><span class="string">&quot;NONE&quot;</span><span class="punctuation">,</span></span><br><span class="line">                            <span class="attr">&quot;boost&quot;</span><span class="punctuation">:</span><span class="number">1</span></span><br><span class="line">                        <span class="punctuation">&#125;</span></span><br><span class="line">                    <span class="punctuation">&#125;</span></span><br><span class="line">                <span class="punctuation">&#125;</span></span><br><span class="line">            <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;minimum_should_match&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span> </span><br><span class="line">            <span class="attr">&quot;must&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">              <span class="punctuation">&#123;</span><span class="attr">&quot;exists&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="attr">&quot;field&quot;</span><span class="punctuation">:</span> <span class="string">&quot;appId&quot;</span><span class="punctuation">&#125;</span><span class="punctuation">&#125;</span></span><br><span class="line">            <span class="punctuation">]</span><span class="punctuation">,</span> </span><br><span class="line">            <span class="attr">&quot;adjust_pure_negative&quot;</span><span class="punctuation">:</span><span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;boost&quot;</span><span class="punctuation">:</span><span class="number">1</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;sort&quot;</span><span class="punctuation">:</span><span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;timeLocal.keyword&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;order&quot;</span><span class="punctuation">:</span><span class="string">&quot;desc&quot;</span></span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在上述示例中，<code>minimum_should_match</code>参数设置为1，表示<code>should</code>子句下至少需要满足1个条件才能匹配文档。</p><p>通过使用布尔查询和<code>minimum_should_match</code>参数，您可以更精确地控制查询结果，确保<code>should</code>子句下的条件满足的文档才被包含在结果中。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>在ElasticSearch中，同时使用<code>must</code>和<code>should</code>查询时，<code>should</code>子句下的条件不是强制要求满足的条件，而是用于调整相关性得分的因素。如果需要确保<code>should</code>子句下的条件必须满足才能匹配文档，可以使用布尔查询的<code>minimum_should_match</code>参数来控制条件的最小满足数量。这样可以更精确地过滤查询结果，符合预期的逻辑。</p><p>希望本篇博客能够帮助您理解ElasticSearch中<code>must</code>和<code>should</code>查询的行为，并提供解决方案来满足特定的查询需求。</p>]]></content>
      
      
      <categories>
          
          <category> k8s </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ElasticSearch </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>何氏早会分享-安常处顺</title>
      <link href="/posts/1069330390.html"/>
      <url>/posts/1069330390.html</url>
      
        <content type="html"><![CDATA[<h2 id="何为安常处顺"><a href="#何为安常处顺" class="headerlink" title="何为安常处顺"></a>何为安常处顺</h2><p>​出自战国·宋·庄周《庄子·养生主》：“适来，夫子时也；适去，夫子顺也。安时而处顺，哀乐不能入也。”</p><p>​安常处顺，是一种古老而智慧的生活哲学。它强调在面对生活中的各种变化和挑战时，保持内心的平静和从容，以及与周围环境和谐相处。</p><p>​安常意味着在日常生活中保持平静和冷静的心态。无论是遇到工作上的压力，还是个人生活中的困扰，我们都应该学会接受并适应变化，而不是过分焦虑或抵抗。通过保持内心的平和，我们能够更好地处理问题，并找到解决之道。</p><p>​处顺意味着与周围环境和谐相处。我们应该尊重自然的规律和他人的存在，不去强求和改变一切。与环境相处时，我们要学会适应和调整自己，以便更好地融入其中。与他人相处时，我们要尊重彼此的差异和个人选择，以建立和谐的关系。</p><p>​安常处顺不是消极和被动的态度，而是一种智慧和平衡的追求。它要求我们保持内心的稳定和平和，以应对生活中的起伏和挑战。通过接受变化、适应环境和与他人和谐相处，我们可以更好地把握机会，创造积极的结果。</p><h2 id="现代生活中的安常处顺"><a href="#现代生活中的安常处顺" class="headerlink" title="现代生活中的安常处顺"></a>现代生活中的安常处顺</h2><p>​在现代社会中，我们常常面临快节奏、高压力和不断变化的环境。安常处顺的理念提醒我们要保持内心的平静和从容，不被外界的干扰所动摇。它鼓励我们寻找内心的平衡和宁静，以实现生活的和谐与满足。</p><p>​因此，让我们在忙碌的生活中停下来，反思自己的内心状态。学会在面对挑战时保持冷静和平静，接受变化并适应环境。与他人相处时，尊重彼此的差异和选择，以建立和谐的关系。</p><h2 id="怎么做到安常处顺"><a href="#怎么做到安常处顺" class="headerlink" title="怎么做到安常处顺"></a>怎么做到安常处顺</h2><p>​接受现实：无论是面对个人挫折还是社会变迁，接受现实是”安常处顺”的重要一环。我们应该学会接受自己和周围环境的局限和不完美，不过分埋怨或抵抗现实。接受现实能够帮助我们更好地适应和解决问题。</p><p>​保持平静与从容：在面对压力、困难或挫折时，保持内心的平静和从容是”安常处顺”的关键。通过冷静思考和调整心态，我们能够更好地处理问题，做出明智的决策，而不是被情绪和情绪所控制。</p><p>​适应变化：生活中变化是不可避免的，学会适应变化是”安常处顺”的重要方面。我们应该灵活应对变化，调整自己的计划和期望。适应变化意味着我们能够更好地适应新的环境和条件，发现新的机会和可能性。</p><p>​和谐相处：”安常处顺”也包括与他人和谐相处。我们应该尊重他人的权利和观点，学会宽容和理解，减少冲突和争吵。通过建立良好的人际关系和合作，我们能够创造更加和谐和平的生活环境。</p><p>​寻找内心平静：”安常处顺”也强调寻找内心的平静和满足。通过冥想、放松技巧、培养兴趣爱好等方式，我们可以培养内心的平静和满足感，减轻焦虑和压力，提升生活的质量。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>​“安常处顺”并不是一种僵化的规则，而是一种智慧和生活态度，通过运用这一原则，我们能够在现实工作生活中更好地应对挑战和困境，创造出更加平静和幸福的生活。</p>]]></content>
      
      
      <categories>
          
          <category> 个人空间 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 故事分享 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux常用操作及示例</title>
      <link href="/posts/201088553.html"/>
      <url>/posts/201088553.html</url>
      
        <content type="html"><![CDATA[<h1 id="Linux常用操作及示例"><a href="#Linux常用操作及示例" class="headerlink" title="Linux常用操作及示例"></a>Linux常用操作及示例</h1><p>记录一些常用的linux操作以备学习</p><p><img src="https://fx-blog-images.oss-cn-beijing.aliyuncs.com/java/image-20231107165513533.png" alt="image-20231107165513533"></p><h2 id="终端操作"><a href="#终端操作" class="headerlink" title="终端操作"></a>终端操作</h2><h3 id="文件和目录管理"><a href="#文件和目录管理" class="headerlink" title="文件和目录管理"></a>文件和目录管理</h3><ul><li><p><code>ls</code>：列出当前目录下的文件和文件夹。<br>示例：<code>ls -l</code>命令用于以详细列表形式显示文件和目录。</p></li><li><p><code>cd</code>：切换到指定目录。<br>示例：<code>cd /home</code>命令用于切换到&#x2F;home目录。</p></li><li><p><code>pwd</code>：显示当前所在目录的路径。<br>示例：<code>pwd</code>命令用于显示当前所在的目录路径。</p></li><li><p><code>mkdir</code>：创建新目录。<br>示例：<code>mkdir myfolder</code>命令用于在当前目录下创建名为myfolder的新目录。</p></li><li><p><code>rm</code>：删除文件或目录。<br>示例：<code>rm myfile.txt</code>命令用于删除名为myfile.txt的文件。</p></li><li><p><code>cp</code>：复制文件或目录。<br>示例：<code>cp myfile.txt myfolder/</code>命令用于将myfile.txt文件复制到myfolder目录。</p></li><li><p><code>mv</code>：移动文件或目录。<br>示例：<code>mv myfile.txt myfolder/</code>命令用于将myfile.txt文件移动到myfolder目录。</p></li></ul><h3 id="文件查看和编辑"><a href="#文件查看和编辑" class="headerlink" title="文件查看和编辑"></a>文件查看和编辑</h3><ul><li><p><code>cat</code>：显示文件内容。<br>示例：<code>cat myfile.txt</code>命令用于显示myfile.txt文件的内容。</p></li><li><p><code>less</code>：分页显示文件内容。<br>示例：<code>less myfile.txt</code>命令用于以分页方式显示myfile.txt文件的内容。</p></li><li><p><code>head</code>：显示文件的前几行。<br>示例：<code>head -n 5 myfile.txt</code>命令用于显示myfile.txt文件的前5行。</p></li><li><p><code>tail</code>：显示文件的后几行。<br>示例：<code>tail -n 10 myfile.txt</code>命令用于显示myfile.txt文件的最后10行。</p></li><li><p><code>nano</code>：使用Nano编辑器编辑文件。<br>示例：<code>nano myfile.txt</code>命令用于使用Nano编辑器打开myfile.txt文件进行编辑。</p></li><li><p><code>vi</code>或<code>vim</code>：使用Vim编辑器编辑文件。<br>示例：<code>vi myfile.txt</code>命令用于使用Vim编辑器打开myfile.txt文件进行编辑。</p></li></ul><h3 id="系统信息查看"><a href="#系统信息查看" class="headerlink" title="系统信息查看"></a>系统信息查看</h3><ul><li><p><code>uname</code>：显示系统信息。<br>示例：<code>uname -a</code>命令用于显示完整的系统信息。</p></li><li><p><code>whoami</code>：显示当前登录用户。<br>示例：<code>whoami</code>命令用于显示当前登录用户的用户名。</p></li><li><p><code>top</code>：显示系统当前运行的进程和资源占用情况。<br>示例：<code>top</code>命令用于实时显示系统的运行情况。</p></li><li><p><code>free</code>：显示系统内存使用情况。<br>示例：<code>free -h</code>命令用于以人类可读的方式显示系统的内存使用情况。</p></li><li><p><code>df</code>：显示磁盘空间使用情况。<br>示例：<code>df -h</code>命令用于以人类可读的方式显示磁盘空间的使用情况。</p></li></ul><h2 id="包管理器"><a href="#包管理器" class="headerlink" title="包管理器"></a>包管理器</h2><h3 id="APT"><a href="#APT" class="headerlink" title="APT"></a>APT</h3><ul><li><p><code>apt update</code>：更新软件包列表。<br>示例：<code>apt update</code>命令用于更新可用软件包的列表。</p></li><li><p><code>apt upgrade</code>：升级已安装的软件包。<br>示例：<code>apt upgrade</code>命令用于升级所有已安装的软件包。</p></li><li><p><code>apt install</code>：安装指定的软件包。<br>示例：<code>apt install nginx</code>命令用于安装Nginx Web服务器。</p></li><li><p><code>apt remove</code>：卸载指定的软件包。<br>示例：<code>apt remove nginx</code>命令用于卸载Nginx Web服务器。</p></li><li><p><code>apt search</code>：搜索可用的软件包。<br>示例：<code>apt search python</code>命令用于搜索与关键词”python”相关的可用软件包。</p></li></ul><h3 id="YUM"><a href="#YUM" class="headerlink" title="YUM"></a>YUM</h3><ul><li><p><code>yum update</code>：更新软件包。<br>示例：<code>yum update</code>命令用于更新所有可用的软件包。</p></li><li><p><code>yum upgrade</code>：升级已安装的软件包。<br>示例：<code>yum upgrade</code>命令用于升级所有已安装的软件包。</p></li><li><p><code>yum install</code>：安装指定的软件包。<br>示例：<code>yum install httpd</code>命令用于安装Apache HTTP服务器。</p></li><li><p><code>yum remove</code>：卸载指定的软件包。<br>示例：<code>yum remove httpd</code>命令用于卸载Apache HTTP服务器。</p></li><li><p><code>yum search</code>：搜索可用的软件包。<br>示例：<code>yum search mysql</code>命令用于搜索与关键词”mysql”相关的可用软件包。</p></li></ul><h2 id="用户和权限管理"><a href="#用户和权限管理" class="headerlink" title="用户和权限管理"></a>用户和权限管理</h2><ul><li><p><code>useradd</code>：创建新用户。<br>示例：<code>useradd john</code>命令用于创建名为”john”的新用户。</p></li><li><p><code>passwd</code>：修改用户密码。<br>示例：<code>passwd john</code>命令用于修改用户”john”的密码。</p></li><li><p><code>usermod</code>：修改用户属性。<br>示例：<code>usermod -aG sudo john</code>命令用于将用户”john”添加到sudo用户组。</p></li><li><p><code>userdel</code>：删除用户。<br>示例：<code>userdel john</code>命令用于删除用户”john”。</p></li><li><p><code>sudo</code>：以超级用户权限执行命令。<br>示例：<code>sudo apt update</code>命令用于以超级用户权限更新软件包列表。</p></li><li><p><code>chmod</code>：修改文件或目录的权限。<br>示例：<code>chmod 644 myfile.txt</code>命令用于将myfile.txt文件的权限设置为644。</p></li><li><p><code>chown</code>：修改文件或目录的所有者。<br>示例：<code>chown john myfile.txt</code>命令用于将myfile.txt文件的所有者设置为用户”john”。</p></li><li><p><code>chgrp</code>：修改文件或目录的所属组。<br>示例：<code>chgrp staff myfile.txt</code>命令用于将myfile.txt文件的所属组设置为”staff”。</p></li></ul><h2 id="网络管理"><a href="#网络管理" class="headerlink" title="网络管理"></a>网络管理</h2><ul><li><p><code>ifconfig</code>：显示和配置网络接口。<br>示例：<code>ifconfig eth0</code>命令用于显示名为”eth0”的网络接口信息。</p></li><li><p><code>ping</code>：测试与另一个主机的连接。<br>示例：<code>ping google.com</code>命令用于测试与google.com主机的连接。</p></li><li><p><code>ssh</code>：通过SSH协议远程登录到另一个主机。<br>示例：<code>ssh user@example.com</code>命令用于通过SSH协议远程登录到example.com主机。</p></li><li><p><code>scp</code>：通过SSH协议在本地主机和远程主机之间复制文件。<br>示例：<code>scp myfile.txt user@example.com:/home/user/</code>命令用于将myfile.txt文件复制到example.com主机的&#x2F;home&#x2F;user&#x2F;目录。</p></li><li><p><code>wget</code>：从网络上下载文件。<br>示例：<code>wget https://example.com/file.zip</code>命令用于从example.com下载file.zip文件。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> 操作系统 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
